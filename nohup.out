./run.sh: 1: ./run.sh: source: not found
/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/bootstrap.py:108: UserWarning: 
This call to matplotlib.use() has no effect because the backend has already
been chosen; matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
or matplotlib.backends is imported for the first time.

The backend was *originally* set to 'Qt5Agg' by the following code:
  File "/home/lmf/anaconda3/bin/streamlit", line 5, in <module>
    from streamlit.cli import main
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/__init__.py", line 70, in <module>
    from streamlit.delta_generator import DeltaGenerator as _DeltaGenerator
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/delta_generator.py", line 72, in <module>
    from streamlit.elements.arrow import ArrowMixin
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/elements/arrow.py", line 20, in <module>
    from pandas.io.formats.style import Styler
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/pandas/io/formats/style.py", line 34, in <module>
    import matplotlib.pyplot as plt
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/matplotlib/pyplot.py", line 71, in <module>
    from matplotlib.backends import pylab_setup
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/matplotlib/backends/__init__.py", line 16, in <module>
    line for line in traceback.format_stack()


  matplotlib.use("Agg")
2022-10-23 20:25:08.218 Did not auto detect external IP.
Please go to https://docs.streamlit.io/ for debugging hints.

  You can now view your Streamlit app in your browser.

  Network URL: http://219.224.167.226:8502

2022-10-23 20:25:08.472 Traceback (most recent call last):
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/scriptrunner/script_runner.py", line 475, in _run_script
    exec(code, module.__dict__)
  File "/home/lmf/Deploy/220925_RepFPanoStreamlit/demo.py", line 8, in <module>
    from util import *
  File "/home/lmf/Deploy/220925_RepFPanoStreamlit/util.py", line 3, in <module>
    import cv2
ModuleNotFoundError: No module named 'cv2'

2022-10-23 20:25:22.681 Traceback (most recent call last):
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/scriptrunner/script_runner.py", line 475, in _run_script
    exec(code, module.__dict__)
  File "/home/lmf/Deploy/220925_RepFPanoStreamlit/demo.py", line 8, in <module>
    from util import *
  File "/home/lmf/Deploy/220925_RepFPanoStreamlit/util.py", line 3, in <module>
    import cv2
ModuleNotFoundError: No module named 'cv2'

./run.sh: 1: ./run.sh: source: not found
/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/bootstrap.py:108: UserWarning: 
This call to matplotlib.use() has no effect because the backend has already
been chosen; matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
or matplotlib.backends is imported for the first time.

The backend was *originally* set to 'Qt5Agg' by the following code:
  File "/home/lmf/anaconda3/bin/streamlit", line 5, in <module>
    from streamlit.cli import main
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/__init__.py", line 70, in <module>
    from streamlit.delta_generator import DeltaGenerator as _DeltaGenerator
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/delta_generator.py", line 72, in <module>
    from streamlit.elements.arrow import ArrowMixin
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/elements/arrow.py", line 20, in <module>
    from pandas.io.formats.style import Styler
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/pandas/io/formats/style.py", line 34, in <module>
    import matplotlib.pyplot as plt
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/matplotlib/pyplot.py", line 71, in <module>
    from matplotlib.backends import pylab_setup
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/matplotlib/backends/__init__.py", line 16, in <module>
    line for line in traceback.format_stack()


  matplotlib.use("Agg")
2022-10-23 20:26:26.251 Did not auto detect external IP.
Please go to https://docs.streamlit.io/ for debugging hints.

  You can now view your Streamlit app in your browser.

  Network URL: http://219.224.167.226:8503

2022-10-23 20:26:36.823 Traceback (most recent call last):
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/scriptrunner/script_runner.py", line 475, in _run_script
    exec(code, module.__dict__)
  File "/home/lmf/Deploy/220925_RepFPanoStreamlit/demo.py", line 8, in <module>
    from util import *
  File "/home/lmf/Deploy/220925_RepFPanoStreamlit/util.py", line 3, in <module>
    import cv2
ModuleNotFoundError: No module named 'cv2'

2022-10-23 20:27:15.640 Did not auto detect external IP.
Please go to https://docs.streamlit.io/ for debugging hints.

  You can now view your Streamlit app in your browser.

  Network URL: http://219.224.167.226:8504

Killed
2022-10-23 20:36:43.122 Did not auto detect external IP.
Please go to https://docs.streamlit.io/ for debugging hints.

  You can now view your Streamlit app in your browser.

  Network URL: http://219.224.167.226:8501

INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102320382162', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102320382162/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102320382162
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'scene_gcn', 'bdb3d_estimation', 'shape_encoder', 'shape_decoder'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmp78l9gmlk/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/16/16.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/15/15.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/14/14.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/13/13.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/12/12.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/11/11.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/10/10.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/9/9.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/8/8.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/7/7.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/6/6.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/5/5.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/4/4.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/3/3.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/2/2.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/1/1.obj
INFO:root:Loading /dev/shm/tmp78l9gmlk/0/0.obj
INFO:test:Test time elapsed: (24.144341).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 10433
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102320382162/wandb/offline-run-20221023_203821-22102320382162/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102320382162/wandb/offline-run-20221023_203821-22102320382162/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102320382162/wandb/offline-run-20221023_203821-22102320382162
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102320413497', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102320413497/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102320413497
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'bdb3d_estimation', 'shape_encoder', 'scene_gcn', 'shape_decoder'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmp_66xm1g9/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/16/16.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/15/15.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/14/14.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/13/13.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/12/12.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/11/11.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/10/10.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/9/9.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/8/8.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/7/7.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/6/6.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/5/5.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/4/4.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/3/3.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/2/2.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/1/1.obj
INFO:root:Loading /dev/shm/tmp_66xm1g9/0/0.obj
INFO:test:Test time elapsed: (24.043812).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 10637
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102320413497/wandb/offline-run-20221023_204135-22102320413497/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102320413497/wandb/offline-run-20221023_204135-22102320413497/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102320413497/wandb/offline-run-20221023_204135-22102320413497
image_path: /home/lmf/tmp/repf_pano_client/1666528677/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666528677/input.png"
detect_result_bbx_list {
  xmin: 311
  ymin: 306
  xmax: 555
  ymax: 445
  label: 2
  conf: 0.6930673718452454
}
detect_result_bbx_list {
  xmin: 680
  ymin: 200
  xmax: 784
  ymax: 332
  label: 1
  conf: 0.49333620071411133
}
detect_result_bbx_list {
  xmin: 329
  ymin: 310
  xmax: 445
  ymax: 434
  label: 10
  conf: 0.5436238050460815
}
detect_result_bbx_list {
  xmin: 678
  ymin: 199
  xmax: 784
  ymax: 342
  label: 10
  conf: 0.29169943928718567
}
detect_result_bbx_list {
  xmin: 573
  ymin: 188
  xmax: 651
  ymax: 386
  label: 10
  conf: 0.5145995020866394
}
detect_result_bbx_list {
  xmin: 126
  ymin: 170
  xmax: 220
  ymax: 394
  label: 10
  conf: 0.4034420847892761
}
detect_result_bbx_list {
  xmin: 965
  ymin: 207
  xmax: 1021
  ymax: 365
  label: 9
  conf: 0.5806583762168884
}
detect_result_bbx_list {
  xmin: 43
  ymin: 177
  xmax: 148
  ymax: 412
  label: 9
  conf: 0.8423014879226685
}
detect_result_bbx_list {
  xmin: 197
  ymin: 196
  xmax: 272
  ymax: 382
  label: 9
  conf: 0.9051350951194763
}
detect_result_bbx_list {
  xmin: 60
  ymin: 76
  xmax: 131
  ymax: 105
  label: 7
  conf: 0.6799194812774658
}
detect_result_bbx_list {
  xmin: 437
  ymin: 357
  xmax: 537
  ymax: 444
  label: 11
  conf: 0.7270703315734863
}
detect_result_bbx_list {
  xmin: 677
  ymin: 200
  xmax: 786
  ymax: 339
  label: 4
  conf: 0.8902827501296997
}
detect_result_bbx_list {
  xmin: 558
  ymin: 188
  xmax: 652
  ymax: 343
  label: 4
  conf: 0.6036067008972168
}
detect_result_bbx_list {
  xmin: 423
  ymin: 332
  xmax: 553
  ymax: 380
  label: 6
  conf: 0.5519174337387085
}
detect_result_bbx_list {
  xmin: 389
  ymin: 179
  xmax: 530
  ymax: 321
  label: 12
  conf: 0.4581897556781769
}

/home/lmf/tmp/repf_pano_client/1666528677/input.png
image_path: /home/lmf/tmp/repf_pano_client/1666528876/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666528876/input.png"
detect_result_bbx_list {
  xmin: 513
  ymin: 266
  xmax: 551
  ymax: 327
  label: 16
  conf: 0.2671506404876709
}
detect_result_bbx_list {
  xmin: 944
  ymin: 188
  xmax: 1024
  ymax: 346
  label: 16
  conf: 0.48063820600509644
}
detect_result_bbx_list {
  xmin: 512
  ymin: 274
  xmax: 547
  ymax: 326
  label: 6
  conf: 0.2788417935371399
}
detect_result_bbx_list {
  xmin: 733
  ymin: 343
  xmax: 806
  ymax: 390
  label: 6
  conf: 0.6524900794029236
}
detect_result_bbx_list {
  xmin: 207
  ymin: 293
  xmax: 280
  ymax: 375
  label: 6
  conf: 0.2829246520996094
}
detect_result_bbx_list {
  xmin: 945
  ymin: 187
  xmax: 1021
  ymax: 345
  label: 10
  conf: 0.2863098680973053
}
detect_result_bbx_list {
  xmin: 546
  ymin: 293
  xmax: 730
  ymax: 384
  label: 10
  conf: 0.5258209705352783
}
detect_result_bbx_list {
  xmin: 738
  ymin: 341
  xmax: 797
  ymax: 391
  label: 8
  conf: 0.5907926559448242
}
detect_result_bbx_list {
  xmin: 216
  ymin: 273
  xmax: 500
  ymax: 483
  label: 8
  conf: 0.9222833514213562
}
detect_result_bbx_list {
  xmin: 214
  ymin: 272
  xmax: 490
  ymax: 407
  label: 2
  conf: 0.8568418622016907
}
detect_result_bbx_list {
  xmin: 547
  ymin: 293
  xmax: 728
  ymax: 393
  label: 2
  conf: 0.7233128547668457
}
detect_result_bbx_list {
  xmin: 422
  ymin: 226
  xmax: 504
  ymax: 311
  label: 4
  conf: 0.47482460737228394
}
detect_result_bbx_list {
  xmin: 301
  ymin: 208
  xmax: 360
  ymax: 287
  label: 4
  conf: 0.5872573256492615
}
detect_result_bbx_list {
  xmin: 965
  ymin: 182
  xmax: 1024
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  ymin: 182
  xmax: 11
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  xmin: 246
  ymin: 118
  xmax: 265
  ymax: 127
  label: 7
  conf: 0.47723111510276794
}
detect_result_bbx_list {
  xmin: 732
  ymin: 50
  xmax: 795
  ymax: 73
  label: 7
  conf: 0.658929169178009
}
detect_result_bbx_list {
  xmin: 421
  ymin: 205
  xmax: 427
  ymax: 208
  label: 7
  conf: 0.2527554929256439
}
detect_result_bbx_list {
  xmin: 383
  ymin: 171
  xmax: 392
  ymax: 178
  label: 7
  conf: 0.38406017422676086
}
detect_result_bbx_list {
  xmin: 477
  ymin: 160
  xmax: 488
  ymax: 169
  label: 7
  conf: 0.41188785433769226
}
detect_result_bbx_list {
  xmin: 962
  ymin: 141
  xmax: 977
  ymax: 151
  label: 7
  conf: 0.43521857261657715
}
detect_result_bbx_list {
  xmin: 196
  ymin: 184
  xmax: 200
  ymax: 188
  label: 7
  conf: 0.2737222909927368
}
detect_result_bbx_list {
  xmin: 271
  ymin: 210
  xmax: 287
  ymax: 245
  label: 7
  conf: 0.2933257818222046
}
detect_result_bbx_list {
  xmin: 414
  ymin: 219
  xmax: 508
  ymax: 314
  label: 5
  conf: 0.6918484568595886
}
detect_result_bbx_list {
  xmin: 309
  ymin: 206
  xmax: 360
  ymax: 285
  label: 5
  conf: 0.3684013783931732
}
detect_result_bbx_list {
  xmin: 142
  ymin: 144
  xmax: 360
  ymax: 378
  label: 9
  conf: 0.6570485830307007
}
detect_result_bbx_list {
  xmin: 68
  ymin: 181
  xmax: 131
  ymax: 365
  label: 9
  conf: 0.8634265661239624
}
detect_result_bbx_list {
  xmin: 808
  ymin: 189
  xmax: 869
  ymax: 360
  label: 9
  conf: 0.8923311829566956
}
detect_result_bbx_list {
  xmin: 584
  ymin: 255
  xmax: 678
  ymax: 330
  label: 12
  conf: 0.9425597190856934
}
detect_result_bbx_list {
  xmin: 877
  ymin: 226
  xmax: 902
  ymax: 257
  label: 1
  conf: 0.8638669848442078
}
detect_result_bbx_list {
  xmin: 173
  ymin: 216
  xmax: 185
  ymax: 266
  label: 1
  conf: 0.8212325572967529
}
detect_result_bbx_list {
  xmin: 406
  ymin: 311
  xmax: 467
  ymax: 370
  conf: 0.25148269534111023
}
detect_result_bbx_list {
  xmin: 403
  ymin: 311
  xmax: 570
  ymax: 397
  label: 15
  conf: 0.2968512177467346
}

/home/lmf/tmp/repf_pano_client/1666528876/input.png
image_path: /home/lmf/tmp/repf_pano_client/1666528943/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666528943/input.png"
detect_result_bbx_list {
  xmin: 513
  ymin: 266
  xmax: 551
  ymax: 327
  label: 16
  conf: 0.2671506404876709
}
detect_result_bbx_list {
  xmin: 944
  ymin: 188
  xmax: 1024
  ymax: 346
  label: 16
  conf: 0.48063820600509644
}
detect_result_bbx_list {
  xmin: 512
  ymin: 274
  xmax: 547
  ymax: 326
  label: 6
  conf: 0.2788417935371399
}
detect_result_bbx_list {
  xmin: 733
  ymin: 343
  xmax: 806
  ymax: 390
  label: 6
  conf: 0.6524900794029236
}
detect_result_bbx_list {
  xmin: 207
  ymin: 293
  xmax: 280
  ymax: 375
  label: 6
  conf: 0.2829246520996094
}
detect_result_bbx_list {
  xmin: 945
  ymin: 187
  xmax: 1021
  ymax: 345
  label: 10
  conf: 0.2863098680973053
}
detect_result_bbx_list {
  xmin: 546
  ymin: 293
  xmax: 730
  ymax: 384
  label: 10
  conf: 0.5258209705352783
}
detect_result_bbx_list {
  xmin: 738
  ymin: 341
  xmax: 797
  ymax: 391
  label: 8
  conf: 0.5907926559448242
}
detect_result_bbx_list {
  xmin: 216
  ymin: 273
  xmax: 500
  ymax: 483
  label: 8
  conf: 0.9222833514213562
}
detect_result_bbx_list {
  xmin: 214
  ymin: 272
  xmax: 490
  ymax: 407
  label: 2
  conf: 0.8568418622016907
}
detect_result_bbx_list {
  xmin: 547
  ymin: 293
  xmax: 728
  ymax: 393
  label: 2
  conf: 0.7233128547668457
}
detect_result_bbx_list {
  xmin: 422
  ymin: 226
  xmax: 504
  ymax: 311
  label: 4
  conf: 0.47482460737228394
}
detect_result_bbx_list {
  xmin: 301
  ymin: 208
  xmax: 360
  ymax: 287
  label: 4
  conf: 0.5872573256492615
}
detect_result_bbx_list {
  xmin: 965
  ymin: 182
  xmax: 1024
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  ymin: 182
  xmax: 11
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  xmin: 246
  ymin: 118
  xmax: 265
  ymax: 127
  label: 7
  conf: 0.47723111510276794
}
detect_result_bbx_list {
  xmin: 732
  ymin: 50
  xmax: 795
  ymax: 73
  label: 7
  conf: 0.658929169178009
}
detect_result_bbx_list {
  xmin: 421
  ymin: 205
  xmax: 427
  ymax: 208
  label: 7
  conf: 0.2527554929256439
}
detect_result_bbx_list {
  xmin: 383
  ymin: 171
  xmax: 392
  ymax: 178
  label: 7
  conf: 0.38406017422676086
}
detect_result_bbx_list {
  xmin: 477
  ymin: 160
  xmax: 488
  ymax: 169
  label: 7
  conf: 0.41188785433769226
}
detect_result_bbx_list {
  xmin: 962
  ymin: 141
  xmax: 977
  ymax: 151
  label: 7
  conf: 0.43521857261657715
}
detect_result_bbx_list {
  xmin: 196
  ymin: 184
  xmax: 200
  ymax: 188
  label: 7
  conf: 0.2737222909927368
}
detect_result_bbx_list {
  xmin: 271
  ymin: 210
  xmax: 287
  ymax: 245
  label: 7
  conf: 0.2933257818222046
}
detect_result_bbx_list {
  xmin: 414
  ymin: 219
  xmax: 508
  ymax: 314
  label: 5
  conf: 0.6918484568595886
}
detect_result_bbx_list {
  xmin: 309
  ymin: 206
  xmax: 360
  ymax: 285
  label: 5
  conf: 0.3684013783931732
}
detect_result_bbx_list {
  xmin: 142
  ymin: 144
  xmax: 360
  ymax: 378
  label: 9
  conf: 0.6570485830307007
}
detect_result_bbx_list {
  xmin: 68
  ymin: 181
  xmax: 131
  ymax: 365
  label: 9
  conf: 0.8634265661239624
}
detect_result_bbx_list {
  xmin: 808
  ymin: 189
  xmax: 869
  ymax: 360
  label: 9
  conf: 0.8923311829566956
}
detect_result_bbx_list {
  xmin: 584
  ymin: 255
  xmax: 678
  ymax: 330
  label: 12
  conf: 0.9425597190856934
}
detect_result_bbx_list {
  xmin: 877
  ymin: 226
  xmax: 902
  ymax: 257
  label: 1
  conf: 0.8638669848442078
}
detect_result_bbx_list {
  xmin: 173
  ymin: 216
  xmax: 185
  ymax: 266
  label: 1
  conf: 0.8212325572967529
}
detect_result_bbx_list {
  xmin: 406
  ymin: 311
  xmax: 467
  ymax: 370
  conf: 0.25148269534111023
}
detect_result_bbx_list {
  xmin: 403
  ymin: 311
  xmax: 570
  ymax: 397
  label: 15
  conf: 0.2968512177467346
}
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102320424185', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102320424185/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102320424185
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'bdb3d_estimation', 'shape_encoder', 'shape_decoder', 'scene_gcn'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmp41bqdpb3/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/16/16.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/15/15.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/14/14.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/13/13.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/12/12.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/11/11.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/10/10.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/9/9.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/8/8.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/7/7.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/6/6.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/5/5.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/4/4.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/3/3.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/2/2.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/1/1.obj
INFO:root:Loading /dev/shm/tmp41bqdpb3/0/0.obj
INFO:test:Test time elapsed: (24.310529).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 10815
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102320424185/wandb/offline-run-20221023_204241-22102320424185/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102320424185/wandb/offline-run-20221023_204241-22102320424185/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102320424185/wandb/offline-run-20221023_204241-22102320424185
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102320474802', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102320474802/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102320474802
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'shape_encoder', 'bdb3d_estimation', 'scene_gcn', 'shape_decoder'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmpu3lm7n2r/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/16/16.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/15/15.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/14/14.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/13/13.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/12/12.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/11/11.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/10/10.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/9/9.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/8/8.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/7/7.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/6/6.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/5/5.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/4/4.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/3/3.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/2/2.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/1/1.obj
INFO:root:Loading /dev/shm/tmpu3lm7n2r/0/0.obj
INFO:test:Test time elapsed: (24.628663).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 11060
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102320474802/wandb/offline-run-20221023_204748-22102320474802/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102320474802/wandb/offline-run-20221023_204748-22102320474802/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102320474802/wandb/offline-run-20221023_204748-22102320474802
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102320495566', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102320495566/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102320495566
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'shape_decoder', 'scene_gcn', 'shape_encoder', 'bdb3d_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmp7i7btx4_/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/16/16.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/15/15.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/14/14.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/13/13.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/12/12.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/11/11.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/10/10.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/9/9.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/8/8.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/7/7.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/6/6.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/5/5.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/4/4.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/3/3.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/2/2.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/1/1.obj
INFO:root:Loading /dev/shm/tmp7i7btx4_/0/0.obj
INFO:test:Test time elapsed: (24.187277).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 11272
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102320495566/wandb/offline-run-20221023_204955-22102320495566/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102320495566/wandb/offline-run-20221023_204955-22102320495566/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102320495566/wandb/offline-run-20221023_204955-22102320495566

/home/lmf/tmp/repf_pano_client/1666528943/input.png
image_path: /home/lmf/tmp/repf_pano_client/1666529216/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666529216/input.png"
detect_result_bbx_list {
  xmin: 390
  ymin: 241
  xmax: 405
  ymax: 259
  label: 1
  conf: 0.7590371966362
}
detect_result_bbx_list {
  xmin: 459
  ymin: 229
  xmax: 495
  ymax: 263
  label: 1
  conf: 0.9051132798194885
}
detect_result_bbx_list {
  xmin: 75
  ymin: 240
  xmax: 83
  ymax: 259
  label: 1
  conf: 0.46738922595977783
}
detect_result_bbx_list {
  xmin: 430
  ymin: 236
  xmax: 438
  ymax: 281
  label: 1
  conf: 0.4293532967567444
}
detect_result_bbx_list {
  xmin: 202
  ymin: 334
  xmax: 249
  ymax: 368
  label: 2
  conf: 0.281116783618927
}
detect_result_bbx_list {
  xmin: 434
  ymin: 305
  xmax: 500
  ymax: 347
  label: 2
  conf: 0.7471470832824707
}
detect_result_bbx_list {
  ymin: 294
  xmax: 158
  ymax: 424
  label: 2
  conf: 0.836031973361969
}
detect_result_bbx_list {
  xmin: 1008
  ymin: 298
  xmax: 1024
  ymax: 396
  label: 2
  conf: 0.47760310769081116
}
detect_result_bbx_list {
  xmin: 521
  ymin: 287
  xmax: 571
  ymax: 335
  label: 6
  conf: 0.32464784383773804
}
detect_result_bbx_list {
  xmin: 201
  ymin: 333
  xmax: 249
  ymax: 371
  label: 6
  conf: 0.42424842715263367
}
detect_result_bbx_list {
  xmin: 68
  ymin: 339
  xmax: 163
  ymax: 440
  label: 6
  conf: 0.8886918425559998
}
detect_result_bbx_list {
  xmin: 428
  ymin: 301
  xmax: 507
  ymax: 351
  label: 6
  conf: 0.7675584554672241
}
detect_result_bbx_list {
  xmin: 407
  ymin: 255
  xmax: 441
  ymax: 305
  label: 6
  conf: 0.2771575152873993
}
detect_result_bbx_list {
  xmin: 229
  ymin: 300
  xmax: 294
  ymax: 339
  label: 8
  conf: 0.3574024736881256
}
detect_result_bbx_list {
  xmin: 518
  ymin: 289
  xmax: 575
  ymax: 336
  label: 8
  conf: 0.8641713857650757
}
detect_result_bbx_list {
  xmin: 307
  ymin: 285
  xmax: 442
  ymax: 367
  label: 8
  conf: 0.9211556315422058
}
detect_result_bbx_list {
  xmin: 73
  ymin: 300
  xmax: 145
  ymax: 400
  label: 8
  conf: 0.2745979428291321
}
detect_result_bbx_list {
  xmin: 521
  ymin: 236
  xmax: 553
  ymax: 289
  label: 9
  conf: 0.37735825777053833
}
detect_result_bbx_list {
  xmin: 415
  ymin: 237
  xmax: 437
  ymax: 287
  label: 9
  conf: 0.4164515733718872
}
detect_result_bbx_list {
  xmin: 189
  ymin: 216
  xmax: 231
  ymax: 368
  label: 9
  conf: 0.6934099197387695
}
detect_result_bbx_list {
  xmin: 676
  ymin: 123
  xmax: 878
  ymax: 473
  label: 9
  conf: 0.6848574280738831
}
detect_result_bbx_list {
  xmin: 972
  ymin: 221
  xmax: 999
  ymax: 348
  label: 9
  conf: 0.38804882764816284
}
detect_result_bbx_list {
  xmin: 539
  ymin: 150
  xmax: 575
  ymax: 174
  label: 7
  conf: 0.651954710483551
}
detect_result_bbx_list {
  xmin: 113
  ymin: 115
  xmax: 166
  ymax: 148
  label: 7
  conf: 0.7370451092720032
}
detect_result_bbx_list {
  xmin: 521
  ymin: 211
  xmax: 537
  ymax: 220
  label: 7
  conf: 0.39527153968811035
}
detect_result_bbx_list {
  xmin: 324
  ymin: 202
  xmax: 344
  ymax: 211
  label: 7
  conf: 0.4755205810070038
}
detect_result_bbx_list {
  xmin: 31
  ymin: 201
  xmax: 51
  ymax: 212
  label: 7
  conf: 0.3716917634010315
}
detect_result_bbx_list {
  xmin: 402
  ymin: 220
  xmax: 416
  ymax: 225
  label: 7
  conf: 0.2699497640132904
}
detect_result_bbx_list {
  xmin: 916
  ymin: 196
  xmax: 971
  ymax: 354
  label: 4
  conf: 0.4281087815761566
}
detect_result_bbx_list {
  xmin: 569
  ymin: 231
  xmax: 594
  ymax: 264
  label: 4
  conf: 0.5342641472816467
}
detect_result_bbx_list {
  ymin: 230
  xmax: 51
  ymax: 294
  label: 4
  conf: 0.920391321182251
}
detect_result_bbx_list {
  xmin: 290
  ymin: 229
  xmax: 383
  ymax: 294
  label: 4
  conf: 0.8119235634803772
}
detect_result_bbx_list {
  xmin: 84
  ymin: 218
  xmax: 154
  ymax: 311
  label: 4
  conf: 0.8669071197509766
}
detect_result_bbx_list {
  xmin: 416
  ymin: 236
  xmax: 438
  ymax: 281
  label: 4
  conf: 0.8041023015975952
}
detect_result_bbx_list {
  xmin: 521
  ymin: 234
  xmax: 553
  ymax: 287
  label: 4
  conf: 0.8600802421569824
}
detect_result_bbx_list {
  xmin: 1021
  ymin: 230
  xmax: 1024
  ymax: 294
  label: 4
  conf: 0.920391321182251
}
detect_result_bbx_list {
  xmin: 202
  ymin: 335
  xmax: 252
  ymax: 369
  label: 15
  conf: 0.45884594321250916
}
detect_result_bbx_list {
  xmin: 414
  ymin: 305
  xmax: 547
  ymax: 369
  label: 15
  conf: 0.30935683846473694
}
detect_result_bbx_list {
  xmin: 913
  ymin: 203
  xmax: 975
  ymax: 352
  label: 3
  conf: 0.5939467549324036
}
detect_result_bbx_list {
  xmin: 72
  ymin: 300
  xmax: 138
  ymax: 399
  conf: 0.3699818551540375
}
detect_result_bbx_list {
  xmin: 329
  ymin: 233
  xmax: 381
  ymax: 294
  label: 16
  conf: 0.2820669412612915
}
detect_result_bbx_list {
  xmin: 522
  ymin: 292
  xmax: 573
  ymax: 332
  label: 10
  conf: 0.48184734582901
}
detect_result_bbx_list {
  xmin: 225
  ymin: 299
  xmax: 248
  ymax: 342
  label: 10
  conf: 0.3268856704235077
}
detect_result_bbx_list {
  xmin: 909
  ymin: 199
  xmax: 953
  ymax: 350
  label: 5
  conf: 0.5237018465995789
}
detect_result_bbx_list {
  xmin: 954
  ymin: 215
  xmax: 960
  ymax: 343
  label: 5
  conf: 0.25582242012023926
}

/home/lmf/tmp/repf_pano_client/1666529216/input.png
image_path: /home/lmf/tmp/repf_pano_client/1666529365/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666529365/input.png"
detect_result_bbx_list {
  xmin: 917
  ymin: 162
  xmax: 950
  ymax: 177
  label: 7
  conf: 0.3668875992298126
}
detect_result_bbx_list {
  xmin: 151
  ymin: 192
  xmax: 172
  ymax: 203
  label: 7
  conf: 0.36302921175956726
}
detect_result_bbx_list {
  xmin: 283
  ymin: 182
  xmax: 310
  ymax: 196
  label: 7
  conf: 0.3662489652633667
}
detect_result_bbx_list {
  xmin: 437
  ymin: 175
  xmax: 463
  ymax: 190
  label: 7
  conf: 0.29575079679489136
}
detect_result_bbx_list {
  xmin: 651
  ymin: 118
  xmax: 694
  ymax: 148
  label: 7
  conf: 0.4342093765735626
}
detect_result_bbx_list {
  xmin: 23
  ymin: 337
  xmax: 103
  ymax: 390
  label: 2
  conf: 0.2721903324127197
}
detect_result_bbx_list {
  xmin: 117
  ymin: 306
  xmax: 204
  ymax: 366
  label: 2
  conf: 0.37021100521087646
}
detect_result_bbx_list {
  xmin: 216
  ymin: 313
  xmax: 370
  ymax: 399
  label: 2
  conf: 0.7222208380699158
}
detect_result_bbx_list {
  xmin: 825
  ymin: 328
  xmax: 859
  ymax: 392
  label: 2
  conf: 0.27724015712738037
}
detect_result_bbx_list {
  xmin: 113
  ymin: 304
  xmax: 210
  ymax: 369
  label: 10
  conf: 0.3220124840736389
}
detect_result_bbx_list {
  xmin: 418
  ymin: 299
  xmax: 458
  ymax: 334
  label: 10
  conf: 0.32498565316200256
}
detect_result_bbx_list {
  xmin: 745
  ymin: 317
  xmax: 852
  ymax: 405
  label: 10
  conf: 0.2565459907054901
}
detect_result_bbx_list {
  xmin: 23
  ymin: 346
  xmax: 83
  ymax: 397
  label: 6
  conf: 0.4926191568374634
}
detect_result_bbx_list {
  xmin: 949
  ymin: 232
  xmax: 1021
  ymax: 291
  label: 1
  conf: 0.8288953900337219
}
detect_result_bbx_list {
  xmin: 881
  ymin: 200
  xmax: 918
  ymax: 380
  label: 9
  conf: 0.8012250065803528
}
detect_result_bbx_list {
  xmin: 609
  ymin: 195
  xmax: 684
  ymax: 378
  label: 9
  conf: 0.8452745079994202
}
detect_result_bbx_list {
  xmin: 494
  ymin: 212
  xmax: 589
  ymax: 366
  label: 9
  conf: 0.9009711742401123
}
detect_result_bbx_list {
  xmin: 370
  ymin: 192
  xmax: 462
  ymax: 365
  label: 9
  conf: 0.2707929015159607
}
detect_result_bbx_list {
  xmin: 237
  ymin: 222
  xmax: 324
  ymax: 331
  label: 9
  conf: 0.28822222352027893
}
detect_result_bbx_list {
  xmin: 238
  ymin: 217
  xmax: 331
  ymax: 339
  label: 4
  conf: 0.8079070448875427
}
detect_result_bbx_list {
  xmin: 18
  ymin: 219
  xmax: 82
  ymax: 330
  label: 4
  conf: 0.8518303036689758
}

/home/lmf/tmp/repf_pano_client/1666529365/input.png
image_path: /home/lmf/tmp/repf_pano_client/1666791822/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666791822/input.png"
detect_result_bbx_list {
  xmin: 513
  ymin: 266
  xmax: 551
  ymax: 327
  label: 16
  conf: 0.2671506404876709
}
detect_result_bbx_list {
  xmin: 944
  ymin: 188
  xmax: 1024
  ymax: 346
  label: 16
  conf: 0.48063820600509644
}
detect_result_bbx_list {
  xmin: 512
  ymin: 274
  xmax: 547
  ymax: 326
  label: 6
  conf: 0.2788417935371399
}
detect_result_bbx_list {
  xmin: 733
  ymin: 343
  xmax: 806
  ymax: 390
  label: 6
  conf: 0.6524900794029236
}
detect_result_bbx_list {
  xmin: 207
  ymin: 293
  xmax: 280
  ymax: 375
  label: 6
  conf: 0.2829246520996094
}
detect_result_bbx_list {
  xmin: 945
  ymin: 187
  xmax: 1021
  ymax: 345
  label: 10
  conf: 0.2863098680973053
}
detect_result_bbx_list {
  xmin: 546
  ymin: 293
  xmax: 730
  ymax: 384
  label: 10
  conf: 0.5258209705352783
}
detect_result_bbx_list {
  xmin: 738
  ymin: 341
  xmax: 797
  ymax: 391
  label: 8
  conf: 0.5907926559448242
}
detect_result_bbx_list {
  xmin: 216
  ymin: 273
  xmax: 500
  ymax: 483
  label: 8
  conf: 0.9222833514213562
}
detect_result_bbx_list {
  xmin: 214
  ymin: 272
  xmax: 490
  ymax: 407
  label: 2
  conf: 0.8568418622016907
}
detect_result_bbx_list {
  xmin: 547
  ymin: 293
  xmax: 728
  ymax: 393
  label: 2
  conf: 0.7233128547668457
}
detect_result_bbx_list {
  xmin: 422
  ymin: 226
  xmax: 504
  ymax: 311
  label: 4
  conf: 0.47482460737228394
}
detect_result_bbx_list {
  xmin: 301
  ymin: 208
  xmax: 360
  ymax: 287
  label: 4
  conf: 0.5872573256492615
}
detect_result_bbx_list {
  xmin: 965
  ymin: 182
  xmax: 1024
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  ymin: 182
  xmax: 11
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  xmin: 246
  ymin: 118
  xmax: 265
  ymax: 127
  label: 7
  conf: 0.47723111510276794
}
detect_result_bbx_list {
  xmin: 732
  ymin: 50
  xmax: 795
  ymax: 73
  label: 7
  conf: 0.658929169178009
}
detect_result_bbx_list {
  xmin: 421
  ymin: 205
  xmax: 427
  ymax: 208
  label: 7
  conf: 0.2527554929256439
}
detect_result_bbx_list {
  xmin: 383
  ymin: 171
  xmax: 392
  ymax: 178
  label: 7
  conf: 0.38406017422676086
}
detect_result_bbx_list {
  xmin: 477
  ymin: 160
  xmax: 488
  ymax: 169
  label: 7
  conf: 0.41188785433769226
}
detect_result_bbx_list {
  xmin: 962
  ymin: 141
  xmax: 977
  ymax: 151
  label: 7
  conf: 0.43521857261657715
}
detect_result_bbx_list {
  xmin: 196
  ymin: 184
  xmax: 200
  ymax: 188
  label: 7
  conf: 0.2737222909927368
}
detect_result_bbx_list {
  xmin: 271
  ymin: 210
  xmax: 287
  ymax: 245
  label: 7
  conf: 0.2933257818222046
}
detect_result_bbx_list {
  xmin: 414
  ymin: 219
  xmax: 508
  ymax: 314
  label: 5
  conf: 0.6918484568595886
}
detect_result_bbx_list {
  xmin: 309
  ymin: 206
  xmax: 360
  ymax: 285
  label: 5
  conf: 0.3684013783931732
}
detect_result_bbx_list {
  xmin: 142
  ymin: 144
  xmax: 360
  ymax: 378
  label: 9
  conf: 0.6570485830307007
}
detect_result_bbx_list {
  xmin: 68
  ymin: 181
  xmax: 131
  ymax: 365
  label: 9
  conf: 0.8634265661239624
}
detect_result_bbx_list {
  xmin: 808
  ymin: 189
  xmax: 869
  ymax: 360
  label: 9
  conf: 0.8923311829566956
}
detect_result_bbx_list {
  xmin: 584
  ymin: 255
  xmax: 678
  ymax: 330
  label: 12
  conf: 0.9425597190856934
}
detect_result_bbx_list {
  xmin: 877
  ymin: 226
  xmax: 902
  ymax: 257
  label: 1
  conf: 0.8638669848442078
}
detect_result_bbx_list {
  xmin: 173
  ymin: 216
  xmax: 185
  ymax: 266
  label: 1
  conf: 0.8212325572967529
}
detect_result_bbx_list {
  xmin: 406
  ymin: 311
  xmax: 467
  ymax: 370
  conf: 0.25148269534111023
}
detect_result_bbx_list {
  xmin: 403
  ymin: 311
  xmax: 570
  ymax: 397
  label: 15
  conf: 0.2968512177467346
}
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102621440100', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102621440100/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102621440100
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'bdb3d_estimation', 'shape_decoder', 'shape_encoder', 'scene_gcn'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmpqz55oehc/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/16/16.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/15/15.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/14/14.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/13/13.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/12/12.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/11/11.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/10/10.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/9/9.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/8/8.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/7/7.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/6/6.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/5/5.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/4/4.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/3/3.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/2/2.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/1/1.obj
INFO:root:Loading /dev/shm/tmpqz55oehc/0/0.obj
INFO:test:Test time elapsed: (24.931919).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 1274
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102621440100/wandb/offline-run-20221026_214401-22102621440100/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102621440100/wandb/offline-run-20221026_214401-22102621440100/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102621440100/wandb/offline-run-20221026_214401-22102621440100
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102621460158', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102621460158/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102621460158
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'scene_gcn', 'shape_decoder', 'bdb3d_estimation', 'shape_encoder'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmp625bjkz6/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/16/16.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/15/15.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/14/14.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/13/13.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/12/12.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/11/11.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/10/10.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/9/9.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/8/8.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/7/7.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/6/6.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/5/5.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/4/4.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/3/3.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/2/2.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/1/1.obj
INFO:root:Loading /dev/shm/tmp625bjkz6/0/0.obj
INFO:test:Test time elapsed: (25.561169).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 1487
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102621460158/wandb/offline-run-20221026_214601-22102621460158/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102621460158/wandb/offline-run-20221026_214601-22102621460158/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102621460158/wandb/offline-run-20221026_214601-22102621460158
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102621470768', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102621470768/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102621470768
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'shape_encoder', 'scene_gcn', 'bdb3d_estimation', 'shape_decoder'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmp0qopffzu/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/16/16.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/15/15.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/14/14.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/13/13.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/12/12.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/11/11.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/10/10.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/9/9.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/8/8.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/7/7.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/6/6.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/5/5.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/4/4.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/3/3.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/2/2.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/1/1.obj
INFO:root:Loading /dev/shm/tmp0qopffzu/0/0.obj
INFO:test:Test time elapsed: (24.425141).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 1900
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102621470768/wandb/offline-run-20221026_214707-22102621470768/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102621470768/wandb/offline-run-20221026_214707-22102621470768/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102621470768/wandb/offline-run-20221026_214707-22102621470768

/home/lmf/tmp/repf_pano_client/1666791822/input.png
image_path: /home/lmf/tmp/repf_pano_client/1666791943/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666791943/input.png"
detect_result_bbx_list {
  xmin: 513
  ymin: 266
  xmax: 551
  ymax: 327
  label: 16
  conf: 0.2671506404876709
}
detect_result_bbx_list {
  xmin: 944
  ymin: 188
  xmax: 1024
  ymax: 346
  label: 16
  conf: 0.48063820600509644
}
detect_result_bbx_list {
  xmin: 512
  ymin: 274
  xmax: 547
  ymax: 326
  label: 6
  conf: 0.2788417935371399
}
detect_result_bbx_list {
  xmin: 733
  ymin: 343
  xmax: 806
  ymax: 390
  label: 6
  conf: 0.6524900794029236
}
detect_result_bbx_list {
  xmin: 207
  ymin: 293
  xmax: 280
  ymax: 375
  label: 6
  conf: 0.2829246520996094
}
detect_result_bbx_list {
  xmin: 945
  ymin: 187
  xmax: 1021
  ymax: 345
  label: 10
  conf: 0.2863098680973053
}
detect_result_bbx_list {
  xmin: 546
  ymin: 293
  xmax: 730
  ymax: 384
  label: 10
  conf: 0.5258209705352783
}
detect_result_bbx_list {
  xmin: 738
  ymin: 341
  xmax: 797
  ymax: 391
  label: 8
  conf: 0.5907926559448242
}
detect_result_bbx_list {
  xmin: 216
  ymin: 273
  xmax: 500
  ymax: 483
  label: 8
  conf: 0.9222833514213562
}
detect_result_bbx_list {
  xmin: 214
  ymin: 272
  xmax: 490
  ymax: 407
  label: 2
  conf: 0.8568418622016907
}
detect_result_bbx_list {
  xmin: 547
  ymin: 293
  xmax: 728
  ymax: 393
  label: 2
  conf: 0.7233128547668457
}
detect_result_bbx_list {
  xmin: 422
  ymin: 226
  xmax: 504
  ymax: 311
  label: 4
  conf: 0.47482460737228394
}
detect_result_bbx_list {
  xmin: 301
  ymin: 208
  xmax: 360
  ymax: 287
  label: 4
  conf: 0.5872573256492615
}
detect_result_bbx_list {
  xmin: 965
  ymin: 182
  xmax: 1024
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  ymin: 182
  xmax: 11
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  xmin: 246
  ymin: 118
  xmax: 265
  ymax: 127
  label: 7
  conf: 0.47723111510276794
}
detect_result_bbx_list {
  xmin: 732
  ymin: 50
  xmax: 795
  ymax: 73
  label: 7
  conf: 0.658929169178009
}
detect_result_bbx_list {
  xmin: 421
  ymin: 205
  xmax: 427
  ymax: 208
  label: 7
  conf: 0.2527554929256439
}
detect_result_bbx_list {
  xmin: 383
  ymin: 171
  xmax: 392
  ymax: 178
  label: 7
  conf: 0.38406017422676086
}
detect_result_bbx_list {
  xmin: 477
  ymin: 160
  xmax: 488
  ymax: 169
  label: 7
  conf: 0.41188785433769226
}
detect_result_bbx_list {
  xmin: 962
  ymin: 141
  xmax: 977
  ymax: 151
  label: 7
  conf: 0.43521857261657715
}
detect_result_bbx_list {
  xmin: 196
  ymin: 184
  xmax: 200
  ymax: 188
  label: 7
  conf: 0.2737222909927368
}
detect_result_bbx_list {
  xmin: 271
  ymin: 210
  xmax: 287
  ymax: 245
  label: 7
  conf: 0.2933257818222046
}
detect_result_bbx_list {
  xmin: 414
  ymin: 219
  xmax: 508
  ymax: 314
  label: 5
  conf: 0.6918484568595886
}
detect_result_bbx_list {
  xmin: 309
  ymin: 206
  xmax: 360
  ymax: 285
  label: 5
  conf: 0.3684013783931732
}
detect_result_bbx_list {
  xmin: 142
  ymin: 144
  xmax: 360
  ymax: 378
  label: 9
  conf: 0.6570485830307007
}
detect_result_bbx_list {
  xmin: 68
  ymin: 181
  xmax: 131
  ymax: 365
  label: 9
  conf: 0.8634265661239624
}
detect_result_bbx_list {
  xmin: 808
  ymin: 189
  xmax: 869
  ymax: 360
  label: 9
  conf: 0.8923311829566956
}
detect_result_bbx_list {
  xmin: 584
  ymin: 255
  xmax: 678
  ymax: 330
  label: 12
  conf: 0.9425597190856934
}
detect_result_bbx_list {
  xmin: 877
  ymin: 226
  xmax: 902
  ymax: 257
  label: 1
  conf: 0.8638669848442078
}
detect_result_bbx_list {
  xmin: 173
  ymin: 216
  xmax: 185
  ymax: 266
  label: 1
  conf: 0.8212325572967529
}
detect_result_bbx_list {
  xmin: 406
  ymin: 311
  xmax: 467
  ymax: 370
  conf: 0.25148269534111023
}
detect_result_bbx_list {
  xmin: 403
  ymin: 311
  xmax: 570
  ymax: 397
  label: 15
  conf: 0.2968512177467346
}

/home/lmf/tmp/repf_pano_client/1666791943/input.png
image_path: /home/lmf/tmp/repf_pano_client/1666792009/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666792009/input.png"
detect_result_bbx_list {
  xmin: 513
  ymin: 266
  xmax: 551
  ymax: 327
  label: 16
  conf: 0.2671506404876709
}
detect_result_bbx_list {
  xmin: 944
  ymin: 188
  xmax: 1024
  ymax: 346
  label: 16
  conf: 0.48063820600509644
}
detect_result_bbx_list {
  xmin: 512
  ymin: 274
  xmax: 547
  ymax: 326
  label: 6
  conf: 0.2788417935371399
}
detect_result_bbx_list {
  xmin: 733
  ymin: 343
  xmax: 806
  ymax: 390
  label: 6
  conf: 0.6524900794029236
}
detect_result_bbx_list {
  xmin: 207
  ymin: 293
  xmax: 280
  ymax: 375
  label: 6
  conf: 0.2829246520996094
}
detect_result_bbx_list {
  xmin: 945
  ymin: 187
  xmax: 1021
  ymax: 345
  label: 10
  conf: 0.2863098680973053
}
detect_result_bbx_list {
  xmin: 546
  ymin: 293
  xmax: 730
  ymax: 384
  label: 10
  conf: 0.5258209705352783
}
detect_result_bbx_list {
  xmin: 738
  ymin: 341
  xmax: 797
  ymax: 391
  label: 8
  conf: 0.5907926559448242
}
detect_result_bbx_list {
  xmin: 216
  ymin: 273
  xmax: 500
  ymax: 483
  label: 8
  conf: 0.9222833514213562
}
detect_result_bbx_list {
  xmin: 214
  ymin: 272
  xmax: 490
  ymax: 407
  label: 2
  conf: 0.8568418622016907
}
detect_result_bbx_list {
  xmin: 547
  ymin: 293
  xmax: 728
  ymax: 393
  label: 2
  conf: 0.7233128547668457
}
detect_result_bbx_list {
  xmin: 422
  ymin: 226
  xmax: 504
  ymax: 311
  label: 4
  conf: 0.47482460737228394
}
detect_result_bbx_list {
  xmin: 301
  ymin: 208
  xmax: 360
  ymax: 287
  label: 4
  conf: 0.5872573256492615
}
detect_result_bbx_list {
  xmin: 965
  ymin: 182
  xmax: 1024
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  ymin: 182
  xmax: 11
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  xmin: 246
  ymin: 118
  xmax: 265
  ymax: 127
  label: 7
  conf: 0.47723111510276794
}
detect_result_bbx_list {
  xmin: 732
  ymin: 50
  xmax: 795
  ymax: 73
  label: 7
  conf: 0.658929169178009
}
detect_result_bbx_list {
  xmin: 421
  ymin: 205
  xmax: 427
  ymax: 208
  label: 7
  conf: 0.2527554929256439
}
detect_result_bbx_list {
  xmin: 383
  ymin: 171
  xmax: 392
  ymax: 178
  label: 7
  conf: 0.38406017422676086
}
detect_result_bbx_list {
  xmin: 477
  ymin: 160
  xmax: 488
  ymax: 169
  label: 7
  conf: 0.41188785433769226
}
detect_result_bbx_list {
  xmin: 962
  ymin: 141
  xmax: 977
  ymax: 151
  label: 7
  conf: 0.43521857261657715
}
detect_result_bbx_list {
  xmin: 196
  ymin: 184
  xmax: 200
  ymax: 188
  label: 7
  conf: 0.2737222909927368
}
detect_result_bbx_list {
  xmin: 271
  ymin: 210
  xmax: 287
  ymax: 245
  label: 7
  conf: 0.2933257818222046
}
detect_result_bbx_list {
  xmin: 414
  ymin: 219
  xmax: 508
  ymax: 314
  label: 5
  conf: 0.6918484568595886
}
detect_result_bbx_list {
  xmin: 309
  ymin: 206
  xmax: 360
  ymax: 285
  label: 5
  conf: 0.3684013783931732
}
detect_result_bbx_list {
  xmin: 142
  ymin: 144
  xmax: 360
  ymax: 378
  label: 9
  conf: 0.6570485830307007
}
detect_result_bbx_list {
  xmin: 68
  ymin: 181
  xmax: 131
  ymax: 365
  label: 9
  conf: 0.8634265661239624
}
detect_result_bbx_list {
  xmin: 808
  ymin: 189
  xmax: 869
  ymax: 360
  label: 9
  conf: 0.8923311829566956
}
detect_result_bbx_list {
  xmin: 584
  ymin: 255
  xmax: 678
  ymax: 330
  label: 12
  conf: 0.9425597190856934
}
detect_result_bbx_list {
  xmin: 877
  ymin: 226
  xmax: 902
  ymax: 257
  label: 1
  conf: 0.8638669848442078
}
detect_result_bbx_list {
  xmin: 173
  ymin: 216
  xmax: 185
  ymax: 266
  label: 1
  conf: 0.8212325572967529
}
detect_result_bbx_list {
  xmin: 406
  ymin: 311
  xmax: 467
  ymax: 370
  conf: 0.25148269534111023
}
detect_result_bbx_list {
  xmin: 403
  ymin: 311
  xmax: 570
  ymax: 397
  label: 15
  conf: 0.2968512177467346
}

/home/lmf/tmp/repf_pano_client/1666792009/input.png
image_path: /home/lmf/tmp/repf_pano_client/1666792211/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666792211/input.png"
detect_result_bbx_list {
  xmin: 513
  ymin: 266
  xmax: 551
  ymax: 327
  label: 16
  conf: 0.2671506404876709
}
detect_result_bbx_list {
  xmin: 944
  ymin: 188
  xmax: 1024
  ymax: 346
  label: 16
  conf: 0.48063820600509644
}
detect_result_bbx_list {
  xmin: 512
  ymin: 274
  xmax: 547
  ymax: 326
  label: 6
  conf: 0.2788417935371399
}
detect_result_bbx_list {
  xmin: 733
  ymin: 343
  xmax: 806
  ymax: 390
  label: 6
  conf: 0.6524900794029236
}
detect_result_bbx_list {
  xmin: 207
  ymin: 293
  xmax: 280
  ymax: 375
  label: 6
  conf: 0.2829246520996094
}
detect_result_bbx_list {
  xmin: 945
  ymin: 187
  xmax: 1021
  ymax: 345
  label: 10
  conf: 0.2863098680973053
}
detect_result_bbx_list {
  xmin: 546
  ymin: 293
  xmax: 730
  ymax: 384
  label: 10
  conf: 0.5258209705352783
}
detect_result_bbx_list {
  xmin: 738
  ymin: 341
  xmax: 797
  ymax: 391
  label: 8
  conf: 0.5907926559448242
}
detect_result_bbx_list {
  xmin: 216
  ymin: 273
  xmax: 500
  ymax: 483
  label: 8
  conf: 0.9222833514213562
}
detect_result_bbx_list {
  xmin: 214
  ymin: 272
  xmax: 490
  ymax: 407
  label: 2
  conf: 0.8568418622016907
}
detect_result_bbx_list {
  xmin: 547
  ymin: 293
  xmax: 728
  ymax: 393
  label: 2
  conf: 0.7233128547668457
}
detect_result_bbx_list {
  xmin: 422
  ymin: 226
  xmax: 504
  ymax: 311
  label: 4
  conf: 0.47482460737228394
}
detect_result_bbx_list {
  xmin: 301
  ymin: 208
  xmax: 360
  ymax: 287
  label: 4
  conf: 0.5872573256492615
}
detect_result_bbx_list {
  xmin: 965
  ymin: 182
  xmax: 1024
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  ymin: 182
  xmax: 11
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  xmin: 246
  ymin: 118
  xmax: 265
  ymax: 127
  label: 7
  conf: 0.47723111510276794
}
detect_result_bbx_list {
  xmin: 732
  ymin: 50
  xmax: 795
  ymax: 73
  label: 7
  conf: 0.658929169178009
}
detect_result_bbx_list {
  xmin: 421
  ymin: 205
  xmax: 427
  ymax: 208
  label: 7
  conf: 0.2527554929256439
}
detect_result_bbx_list {
  xmin: 383
  ymin: 171
  xmax: 392
  ymax: 178
  label: 7
  conf: 0.38406017422676086
}
detect_result_bbx_list {
  xmin: 477
  ymin: 160
  xmax: 488
  ymax: 169
  label: 7
  conf: 0.41188785433769226
}
detect_result_bbx_list {
  xmin: 962
  ymin: 141
  xmax: 977
  ymax: 151
  label: 7
  conf: 0.43521857261657715
}
detect_result_bbx_list {
  xmin: 196
  ymin: 184
  xmax: 200
  ymax: 188
  label: 7
  conf: 0.2737222909927368
}
detect_result_bbx_list {
  xmin: 271
  ymin: 210
  xmax: 287
  ymax: 245
  label: 7
  conf: 0.2933257818222046
}
detect_result_bbx_list {
  xmin: 414
  ymin: 219
  xmax: 508
  ymax: 314
  label: 5
  conf: 0.6918484568595886
}
detect_result_bbx_list {
  xmin: 309
  ymin: 206
  xmax: 360
  ymax: 285
  label: 5
  conf: 0.3684013783931732
}
detect_result_bbx_list {
  xmin: 142
  ymin: 144
  xmax: 360
  ymax: 378
  label: 9
  conf: 0.6570485830307007
}
detect_result_bbx_list {
  xmin: 68
  ymin: 181
  xmax: 131
  ymax: 365
  label: 9
  conf: 0.8634265661239624
}
detect_result_bbx_list {
  xmin: 808
  ymin: 189
  xmax: 869
  ymax: 360
  label: 9
  conf: 0.8923311829566956
}
detect_result_bbx_list {
  xmin: 584
  ymin: 255
  xmax: 678
  ymax: 330
  label: 12
  conf: 0.9425597190856934
}
detect_result_bbx_list {
  xmin: 877
  ymin: 226
  xmax: 902
  ymax: 257
  label: 1
  conf: 0.8638669848442078
}
detect_result_bbx_list {
  xmin: 173
  ymin: 216
  xmax: 185
  ymax: 266
  label: 1
  conf: 0.8212325572967529
}
detect_result_bbx_list {
  xmin: 406
  ymin: 311
  xmax: 467
  ymax: 370
  conf: 0.25148269534111023
}
detect_result_bbx_list {
  xmin: 403
  ymin: 311
  xmax: 570
  ymax: 397
  label: 15
  conf: 0.2968512177467346
}
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102621503052', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102621503052/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102621503052
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'bdb3d_estimation', 'shape_decoder', 'scene_gcn', 'shape_encoder'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmp1qb79mqv/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/16/16.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/15/15.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/14/14.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/13/13.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/12/12.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/11/11.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/10/10.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/9/9.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/8/8.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/7/7.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/6/6.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/5/5.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/4/4.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/3/3.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/2/2.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/1/1.obj
INFO:root:Loading /dev/shm/tmp1qb79mqv/0/0.obj
INFO:test:Test time elapsed: (24.018864).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 2220
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102621503052/wandb/offline-run-20221026_215030-22102621503052/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102621503052/wandb/offline-run-20221026_215030-22102621503052/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102621503052/wandb/offline-run-20221026_215030-22102621503052
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102621543903', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102621543903/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102621543903
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'scene_gcn', 'bdb3d_estimation', 'shape_decoder', 'shape_encoder'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmp7o5us2hv/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/16/16.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/15/15.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/14/14.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/13/13.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/12/12.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/11/11.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/10/10.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/9/9.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/8/8.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/7/7.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/6/6.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/5/5.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/4/4.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/3/3.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/2/2.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/1/1.obj
INFO:root:Loading /dev/shm/tmp7o5us2hv/0/0.obj
INFO:test:Test time elapsed: (23.736695).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 3042
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102621543903/wandb/offline-run-20221026_215439-22102621543903/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102621543903/wandb/offline-run-20221026_215439-22102621543903/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102621543903/wandb/offline-run-20221026_215439-22102621543903
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22102820494472', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22102820494472/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22102820494472
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'shape_decoder', 'shape_encoder', 'bdb3d_estimation', 'scene_gcn'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmpn0zpy2kg/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/16/16.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/15/15.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/14/14.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/13/13.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/12/12.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/11/11.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/10/10.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/9/9.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/8/8.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/7/7.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/6/6.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/5/5.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/4/4.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/3/3.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/2/2.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/1/1.obj
INFO:root:Loading /dev/shm/tmpn0zpy2kg/0/0.obj
INFO:test:Test time elapsed: (24.198584).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 17879
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22102820494472/wandb/offline-run-20221028_204944-22102820494472/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22102820494472/wandb/offline-run-20221028_204944-22102820494472/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22102820494472/wandb/offline-run-20221028_204944-22102820494472

/home/lmf/tmp/repf_pano_client/1666792211/input.png
image_path: /home/lmf/tmp/repf_pano_client/1666792460/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666792460/input.png"
detect_result_bbx_list {
  xmin: 513
  ymin: 266
  xmax: 551
  ymax: 327
  label: 16
  conf: 0.2671506404876709
}
detect_result_bbx_list {
  xmin: 944
  ymin: 188
  xmax: 1024
  ymax: 346
  label: 16
  conf: 0.48063820600509644
}
detect_result_bbx_list {
  xmin: 512
  ymin: 274
  xmax: 547
  ymax: 326
  label: 6
  conf: 0.2788417935371399
}
detect_result_bbx_list {
  xmin: 733
  ymin: 343
  xmax: 806
  ymax: 390
  label: 6
  conf: 0.6524900794029236
}
detect_result_bbx_list {
  xmin: 207
  ymin: 293
  xmax: 280
  ymax: 375
  label: 6
  conf: 0.2829246520996094
}
detect_result_bbx_list {
  xmin: 945
  ymin: 187
  xmax: 1021
  ymax: 345
  label: 10
  conf: 0.2863098680973053
}
detect_result_bbx_list {
  xmin: 546
  ymin: 293
  xmax: 730
  ymax: 384
  label: 10
  conf: 0.5258209705352783
}
detect_result_bbx_list {
  xmin: 738
  ymin: 341
  xmax: 797
  ymax: 391
  label: 8
  conf: 0.5907926559448242
}
detect_result_bbx_list {
  xmin: 216
  ymin: 273
  xmax: 500
  ymax: 483
  label: 8
  conf: 0.9222833514213562
}
detect_result_bbx_list {
  xmin: 214
  ymin: 272
  xmax: 490
  ymax: 407
  label: 2
  conf: 0.8568418622016907
}
detect_result_bbx_list {
  xmin: 547
  ymin: 293
  xmax: 728
  ymax: 393
  label: 2
  conf: 0.7233128547668457
}
detect_result_bbx_list {
  xmin: 422
  ymin: 226
  xmax: 504
  ymax: 311
  label: 4
  conf: 0.47482460737228394
}
detect_result_bbx_list {
  xmin: 301
  ymin: 208
  xmax: 360
  ymax: 287
  label: 4
  conf: 0.5872573256492615
}
detect_result_bbx_list {
  xmin: 965
  ymin: 182
  xmax: 1024
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  ymin: 182
  xmax: 11
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  xmin: 246
  ymin: 118
  xmax: 265
  ymax: 127
  label: 7
  conf: 0.47723111510276794
}
detect_result_bbx_list {
  xmin: 732
  ymin: 50
  xmax: 795
  ymax: 73
  label: 7
  conf: 0.658929169178009
}
detect_result_bbx_list {
  xmin: 421
  ymin: 205
  xmax: 427
  ymax: 208
  label: 7
  conf: 0.2527554929256439
}
detect_result_bbx_list {
  xmin: 383
  ymin: 171
  xmax: 392
  ymax: 178
  label: 7
  conf: 0.38406017422676086
}
detect_result_bbx_list {
  xmin: 477
  ymin: 160
  xmax: 488
  ymax: 169
  label: 7
  conf: 0.41188785433769226
}
detect_result_bbx_list {
  xmin: 962
  ymin: 141
  xmax: 977
  ymax: 151
  label: 7
  conf: 0.43521857261657715
}
detect_result_bbx_list {
  xmin: 196
  ymin: 184
  xmax: 200
  ymax: 188
  label: 7
  conf: 0.2737222909927368
}
detect_result_bbx_list {
  xmin: 271
  ymin: 210
  xmax: 287
  ymax: 245
  label: 7
  conf: 0.2933257818222046
}
detect_result_bbx_list {
  xmin: 414
  ymin: 219
  xmax: 508
  ymax: 314
  label: 5
  conf: 0.6918484568595886
}
detect_result_bbx_list {
  xmin: 309
  ymin: 206
  xmax: 360
  ymax: 285
  label: 5
  conf: 0.3684013783931732
}
detect_result_bbx_list {
  xmin: 142
  ymin: 144
  xmax: 360
  ymax: 378
  label: 9
  conf: 0.6570485830307007
}
detect_result_bbx_list {
  xmin: 68
  ymin: 181
  xmax: 131
  ymax: 365
  label: 9
  conf: 0.8634265661239624
}
detect_result_bbx_list {
  xmin: 808
  ymin: 189
  xmax: 869
  ymax: 360
  label: 9
  conf: 0.8923311829566956
}
detect_result_bbx_list {
  xmin: 584
  ymin: 255
  xmax: 678
  ymax: 330
  label: 12
  conf: 0.9425597190856934
}
detect_result_bbx_list {
  xmin: 877
  ymin: 226
  xmax: 902
  ymax: 257
  label: 1
  conf: 0.8638669848442078
}
detect_result_bbx_list {
  xmin: 173
  ymin: 216
  xmax: 185
  ymax: 266
  label: 1
  conf: 0.8212325572967529
}
detect_result_bbx_list {
  xmin: 406
  ymin: 311
  xmax: 467
  ymax: 370
  conf: 0.25148269534111023
}
detect_result_bbx_list {
  xmin: 403
  ymin: 311
  xmax: 570
  ymax: 397
  label: 15
  conf: 0.2968512177467346
}

/home/lmf/tmp/repf_pano_client/1666792460/input.png
image_path: /home/lmf/tmp/repf_pano_client/1666961366/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1666961366/input.png"
detect_result_bbx_list {
  xmin: 513
  ymin: 266
  xmax: 551
  ymax: 327
  label: 16
  conf: 0.2671506404876709
}
detect_result_bbx_list {
  xmin: 944
  ymin: 188
  xmax: 1024
  ymax: 346
  label: 16
  conf: 0.48063820600509644
}
detect_result_bbx_list {
  xmin: 512
  ymin: 274
  xmax: 547
  ymax: 326
  label: 6
  conf: 0.2788417935371399
}
detect_result_bbx_list {
  xmin: 733
  ymin: 343
  xmax: 806
  ymax: 390
  label: 6
  conf: 0.6524900794029236
}
detect_result_bbx_list {
  xmin: 207
  ymin: 293
  xmax: 280
  ymax: 375
  label: 6
  conf: 0.2829246520996094
}
detect_result_bbx_list {
  xmin: 945
  ymin: 187
  xmax: 1021
  ymax: 345
  label: 10
  conf: 0.2863098680973053
}
detect_result_bbx_list {
  xmin: 546
  ymin: 293
  xmax: 730
  ymax: 384
  label: 10
  conf: 0.5258209705352783
}
detect_result_bbx_list {
  xmin: 738
  ymin: 341
  xmax: 797
  ymax: 391
  label: 8
  conf: 0.5907926559448242
}
detect_result_bbx_list {
  xmin: 216
  ymin: 273
  xmax: 500
  ymax: 483
  label: 8
  conf: 0.9222833514213562
}
detect_result_bbx_list {
  xmin: 214
  ymin: 272
  xmax: 490
  ymax: 407
  label: 2
  conf: 0.8568418622016907
}
detect_result_bbx_list {
  xmin: 547
  ymin: 293
  xmax: 728
  ymax: 393
  label: 2
  conf: 0.7233128547668457
}
detect_result_bbx_list {
  xmin: 422
  ymin: 226
  xmax: 504
  ymax: 311
  label: 4
  conf: 0.47482460737228394
}
detect_result_bbx_list {
  xmin: 301
  ymin: 208
  xmax: 360
  ymax: 287
  label: 4
  conf: 0.5872573256492615
}
detect_result_bbx_list {
  xmin: 965
  ymin: 182
  xmax: 1024
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  ymin: 182
  xmax: 11
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  xmin: 246
  ymin: 118
  xmax: 265
  ymax: 127
  label: 7
  conf: 0.47723111510276794
}
detect_result_bbx_list {
  xmin: 732
  ymin: 50
  xmax: 795
  ymax: 73
  label: 7
  conf: 0.658929169178009
}
detect_result_bbx_list {
  xmin: 421
  ymin: 205
  xmax: 427
  ymax: 208
  label: 7
  conf: 0.2527554929256439
}
detect_result_bbx_list {
  xmin: 383
  ymin: 171
  xmax: 392
  ymax: 178
  label: 7
  conf: 0.38406017422676086
}
detect_result_bbx_list {
  xmin: 477
  ymin: 160
  xmax: 488
  ymax: 169
  label: 7
  conf: 0.41188785433769226
}
detect_result_bbx_list {
  xmin: 962
  ymin: 141
  xmax: 977
  ymax: 151
  label: 7
  conf: 0.43521857261657715
}
detect_result_bbx_list {
  xmin: 196
  ymin: 184
  xmax: 200
  ymax: 188
  label: 7
  conf: 0.2737222909927368
}
detect_result_bbx_list {
  xmin: 271
  ymin: 210
  xmax: 287
  ymax: 245
  label: 7
  conf: 0.2933257818222046
}
detect_result_bbx_list {
  xmin: 414
  ymin: 219
  xmax: 508
  ymax: 314
  label: 5
  conf: 0.6918484568595886
}
detect_result_bbx_list {
  xmin: 309
  ymin: 206
  xmax: 360
  ymax: 285
  label: 5
  conf: 0.3684013783931732
}
detect_result_bbx_list {
  xmin: 142
  ymin: 144
  xmax: 360
  ymax: 378
  label: 9
  conf: 0.6570485830307007
}
detect_result_bbx_list {
  xmin: 68
  ymin: 181
  xmax: 131
  ymax: 365
  label: 9
  conf: 0.8634265661239624
}
detect_result_bbx_list {
  xmin: 808
  ymin: 189
  xmax: 869
  ymax: 360
  label: 9
  conf: 0.8923311829566956
}
detect_result_bbx_list {
  xmin: 584
  ymin: 255
  xmax: 678
  ymax: 330
  label: 12
  conf: 0.9425597190856934
}
detect_result_bbx_list {
  xmin: 877
  ymin: 226
  xmax: 902
  ymax: 257
  label: 1
  conf: 0.8638669848442078
}
detect_result_bbx_list {
  xmin: 173
  ymin: 216
  xmax: 185
  ymax: 266
  label: 1
  conf: 0.8212325572967529
}
detect_result_bbx_list {
  xmin: 406
  ymin: 311
  xmax: 467
  ymax: 370
  conf: 0.25148269534111023
}
detect_result_bbx_list {
  xmin: 403
  ymin: 311
  xmax: 570
  ymax: 397
  label: 15
  conf: 0.2968512177467346
}

/home/lmf/tmp/repf_pano_client/1666961366/input.png
image_path: /home/lmf/tmp/repf_pano_client/1669378964/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1669378964/input.png"
detect_result_bbx_list {
  xmin: 513
  ymin: 266
  xmax: 551
  ymax: 327
  label: 16
  conf: 0.2671506404876709
}
detect_result_bbx_list {
  xmin: 944
  ymin: 188
  xmax: 1024
  ymax: 346
  label: 16
  conf: 0.48063820600509644
}
detect_result_bbx_list {
  xmin: 512
  ymin: 274
  xmax: 547
  ymax: 326
  label: 6
  conf: 0.2788417935371399
}
detect_result_bbx_list {
  xmin: 733
  ymin: 343
  xmax: 806
  ymax: 390
  label: 6
  conf: 0.6524900794029236
}
detect_result_bbx_list {
  xmin: 207
  ymin: 293
  xmax: 280
  ymax: 375
  label: 6
  conf: 0.2829246520996094
}
detect_result_bbx_list {
  xmin: 945
  ymin: 187
  xmax: 1021
  ymax: 345
  label: 10
  conf: 0.2863098680973053
}
detect_result_bbx_list {
  xmin: 546
  ymin: 293
  xmax: 730
  ymax: 384
  label: 10
  conf: 0.5258209705352783
}
detect_result_bbx_list {
  xmin: 738
  ymin: 341
  xmax: 797
  ymax: 391
  label: 8
  conf: 0.5907926559448242
}
detect_result_bbx_list {
  xmin: 216
  ymin: 273
  xmax: 500
  ymax: 483
  label: 8
  conf: 0.9222833514213562
}
detect_result_bbx_list {
  xmin: 214
  ymin: 272
  xmax: 490
  ymax: 407
  label: 2
  conf: 0.8568418622016907
}
detect_result_bbx_list {
  xmin: 547
  ymin: 293
  xmax: 728
  ymax: 393
  label: 2
  conf: 0.7233128547668457
}
detect_result_bbx_list {
  xmin: 422
  ymin: 226
  xmax: 504
  ymax: 311
  label: 4
  conf: 0.47482460737228394
}
detect_result_bbx_list {
  xmin: 301
  ymin: 208
  xmax: 360
  ymax: 287
  label: 4
  conf: 0.5872573256492615
}
detect_result_bbx_list {
  xmin: 965
  ymin: 182
  xmax: 1024
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  ymin: 182
  xmax: 11
  ymax: 261
  label: 4
  conf: 0.31220120191574097
}
detect_result_bbx_list {
  xmin: 246
  ymin: 118
  xmax: 265
  ymax: 127
  label: 7
  conf: 0.47723111510276794
}
detect_result_bbx_list {
  xmin: 732
  ymin: 50
  xmax: 795
  ymax: 73
  label: 7
  conf: 0.658929169178009
}
detect_result_bbx_list {
  xmin: 421
  ymin: 205
  xmax: 427
  ymax: 208
  label: 7
  conf: 0.2527554929256439
}
detect_result_bbx_list {
  xmin: 383
  ymin: 171
  xmax: 392
  ymax: 178
  label: 7
  conf: 0.38406017422676086
}
detect_result_bbx_list {
  xmin: 477
  ymin: 160
  xmax: 488
  ymax: 169
  label: 7
  conf: 0.41188785433769226
}
detect_result_bbx_list {
  xmin: 962
  ymin: 141
  xmax: 977
  ymax: 151
  label: 7
  conf: 0.43521857261657715
}
detect_result_bbx_list {
  xmin: 196
  ymin: 184
  xmax: 200
  ymax: 188
  label: 7
  conf: 0.2737222909927368
}
detect_result_bbx_list {
  xmin: 271
  ymin: 210
  xmax: 287
  ymax: 245
  label: 7
  conf: 0.2933257818222046
}
detect_result_bbx_list {
  xmin: 414
  ymin: 219
  xmax: 508
  ymax: 314
  label: 5
  conf: 0.6918484568595886
}
detect_result_bbx_list {
  xmin: 309
  ymin: 206
  xmax: 360
  ymax: 285
  label: 5
  conf: 0.3684013783931732
}
detect_result_bbx_list {
  xmin: 142
  ymin: 144
  xmax: 360
  ymax: 378
  label: 9
  conf: 0.6570485830307007
}
detect_result_bbx_list {
  xmin: 68
  ymin: 181
  xmax: 131
  ymax: 365
  label: 9
  conf: 0.8634265661239624
}
detect_result_bbx_list {
  xmin: 808
  ymin: 189
  xmax: 869
  ymax: 360
  label: 9
  conf: 0.8923311829566956
}
detect_result_bbx_list {
  xmin: 584
  ymin: 255
  xmax: 678
  ymax: 330
  label: 12
  conf: 0.9425597190856934
}
detect_result_bbx_list {
  xmin: 877
  ymin: 226
  xmax: 902
  ymax: 257
  label: 1
  conf: 0.8638669848442078
}
detect_result_bbx_list {
  xmin: 173
  ymin: 216
  xmax: 185
  ymax: 266
  label: 1
  conf: 0.8212325572967529
}
detect_result_bbx_list {
  xmin: 406
  ymin: 311
  xmax: 467
  ymax: 370
  conf: 0.25148269534111023
}
detect_result_bbx_list {
  xmin: 403
  ymin: 311
  xmax: 570
  ymax: 397
  label: 15
  conf: 0.2968512177467346
}
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22112520230296', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22112520230296/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22112520230296
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'scene_gcn', 'shape_decoder', 'bdb3d_estimation', 'shape_encoder'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmptn0e8541/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmptn0e8541/16/16.obj
INFO:root:Loading /dev/shm/tmptn0e8541/15/15.obj
INFO:root:Loading /dev/shm/tmptn0e8541/14/14.obj
INFO:root:Loading /dev/shm/tmptn0e8541/13/13.obj
INFO:root:Loading /dev/shm/tmptn0e8541/12/12.obj
INFO:root:Loading /dev/shm/tmptn0e8541/11/11.obj
INFO:root:Loading /dev/shm/tmptn0e8541/10/10.obj
INFO:root:Loading /dev/shm/tmptn0e8541/9/9.obj
INFO:root:Loading /dev/shm/tmptn0e8541/8/8.obj
INFO:root:Loading /dev/shm/tmptn0e8541/7/7.obj
INFO:root:Loading /dev/shm/tmptn0e8541/6/6.obj
INFO:root:Loading /dev/shm/tmptn0e8541/5/5.obj
INFO:root:Loading /dev/shm/tmptn0e8541/4/4.obj
INFO:root:Loading /dev/shm/tmptn0e8541/3/3.obj
INFO:root:Loading /dev/shm/tmptn0e8541/2/2.obj
INFO:root:Loading /dev/shm/tmptn0e8541/1/1.obj
INFO:root:Loading /dev/shm/tmptn0e8541/0/0.obj
INFO:test:Test time elapsed: (24.301039).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 32045
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22112520230296/wandb/offline-run-20221125_202303-22112520230296/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22112520230296/wandb/offline-run-20221125_202303-22112520230296/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22112520230296/wandb/offline-run-20221125_202303-22112520230296
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22112821141461', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22112821141461/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22112821141461
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'shape_encoder', 'shape_decoder', 'scene_gcn', 'bdb3d_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmptgkw6aqp/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/16/16.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/15/15.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/14/14.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/13/13.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/12/12.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/11/11.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/10/10.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/9/9.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/8/8.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/7/7.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/6/6.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/5/5.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/4/4.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/3/3.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/2/2.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/1/1.obj
INFO:root:Loading /dev/shm/tmptgkw6aqp/0/0.obj
INFO:test:Test time elapsed: (25.301882).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 21707
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22112821141461/wandb/offline-run-20221128_211414-22112821141461/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22112821141461/wandb/offline-run-20221128_211414-22112821141461/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22112821141461/wandb/offline-run-20221128_211414-22112821141461
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22120121355206', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22120121355206/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22120121355206
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'bdb3d_estimation', 'scene_gcn', 'shape_decoder', 'shape_encoder'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmp4o68w9ya/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/16/16.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/15/15.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/14/14.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/13/13.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/12/12.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/11/11.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/10/10.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/9/9.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/8/8.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/7/7.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/6/6.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/5/5.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/4/4.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/3/3.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/2/2.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/1/1.obj
INFO:root:Loading /dev/shm/tmp4o68w9ya/0/0.obj
INFO:test:Test time elapsed: (24.102173).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 10984
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22120121355206/wandb/offline-run-20221201_213552-22120121355206/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22120121355206/wandb/offline-run-20221201_213552-22120121355206/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22120121355206/wandb/offline-run-20221201_213552-22120121355206
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22120121395208', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22120121395208/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1666520115/input.png.deep/input', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22120121395208
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'shape_encoder', 'scene_gcn', 'shape_decoder', 'bdb3d_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmpwlvm5_rl/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/16/16.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/15/15.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/14/14.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/13/13.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/12/12.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/11/11.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/10/10.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/9/9.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/8/8.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/7/7.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/6/6.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/5/5.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/4/4.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/3/3.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/2/2.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/1/1.obj
INFO:root:Loading /dev/shm/tmpwlvm5_rl/0/0.obj
INFO:test:Test time elapsed: (23.761042).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 11179
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22120121395208/wandb/offline-run-20221201_213952-22120121395208/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22120121395208/wandb/offline-run-20221201_213952-22120121395208/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22120121395208/wandb/offline-run-20221201_213952-22120121395208
INFO:root:Importing iGibson (gibson2 module)
INFO:root:Assets path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/assets
INFO:root:Gibson Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/g_dataset
INFO:root:iG Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/ig_dataset
INFO:root:3D-FRONT Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/threedfront_dataset
INFO:root:CubiCasa5K Dataset path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/data/cubicasa_dataset
INFO:root:Example path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples
INFO:root:Example config path: /home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/examples/configs
pybullet build time: Dec 23 2020 01:47:29
INFO:test:Loading configurations.
INFO:test:{'method': 'Pano3D', 'resume': False, 'finetune': True, 'weight': ['out/relation_scene_gcn/21091021124435/model_best.pth', 'out/layout_estimation/21022217101943/model_best.pth'], 'seed': 123, 'device': {'use_gpu': True, 'gpu_ids': '0', 'num_workers': 4}, 'data': {'split': 'demo/input', 'expand_dis': 0.1, 'igibson_obj_dataset': 'data/igibson_obj', 'g_feature_length': 64, 'height': 512, 'width': 1024}, 'model': {'detector': {'module': 'Detector2D', 'config': 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml', 'weight': 'out/detector/detector_mask_rcnn/model_final.pth', 'score_thresh': 0.6, 'min_iou': 0.25, 'real': False, 'pano': True, 'cf_thresh': 0.3, 'nms_thresh': 0.2, 'nms_all_thresh': 0.4}, 'layout_estimation': {'module': 'HorizonNet', 'loss': 'HorizonLoss', 'backbone': 'resnet50', 'use_rnn': True}, 'bdb3d_estimation': {'module': 'Bdb3DNet', 'loss': 'JointLoss', 'd_k': 64, 'Nr': 16}, 'shape_encoder': {'module': 'LIEN', 'bottleneck_size': 1536, 'shape_code_length': 1344}, 'shape_decoder': {'module': 'LDIF', 'element_count': 32, 'sym_element_count': 16, 'implicit_parameter_length': 32, 'sym_face': 'yz', 'cuda_kernel': False, 'bounding_box': 0.7, 'num_samples': 5000, 'coarse_grid_spacing': 0.04375, 'marching_cube_resolution': 64}, 'scene_gcn': {'module': 'RelationSGCN', 'loss': 'RelationLoss', 'feature_dim': 512, 'update_groups': 1, 'update_steps': 4, 'res_output': True, 'output_bdb3d': True, 'output_relation': True, 'output_label': False, 'relation_adjust': True, 'visualize_adjust': False, 'score_weighted': True, 'score_thres': {'size': 0.5, 'dis': 0.5, 'ori': 0.5, 'obj_obj_tch': 0.07, 'obj_wall_tch': 0.18, 'obj_floor_tch': 0.1, 'obj_ceil_tch': 0.007, 'obj_in_room': 0.95, 'obj_obj_rot': 0.5, 'obj_wall_rot': 0.5, 'obj_obj_dis': 0.5}, 'optimize_steps': 100, 'optimize_lr': 1.0, 'optimize_momentum': 0.9, 'toleration_dis': 0.0, 'loss_weights': {'center': 0.0001, 'size': 1.0, 'dis': 0.01, 'ori': 0.001, 'obj_obj_col': 0.1, 'obj_wall_col': 1.0, 'obj_floor_col': 1.0, 'obj_ceil_col': 1.0, 'obj_obj_tch': 0.1, 'obj_wall_tch': 1.0, 'obj_floor_tch': 1.0, 'obj_ceil_tch': 1.0, 'obj_obj_rot': 0.01, 'obj_wall_rot': 0.1, 'obj_obj_dis': 0.01, 'bdb3d_proj': 10.0}, 'lo_features': ['walls.bdb3d.centroid', 'walls.bdb3d.size', 'walls.bdb3d.center', 'walls.bdb3d.dis', 'walls.bdb3d.ori', 'walls.bfov.lon', 'walls.bfov.lat', 'walls.bfov.x_fov', 'walls.bfov.y_fov'], 'obj_features': ['objs.cls_code', 'objs.bdb3d.size_reg', 'objs.bdb3d.ori_reg', 'objs.bdb3d.ori_cls', 'objs.bdb3d.dis_reg', 'objs.bdb3d.dis_cls', 'objs.delta2d', 'objs.bdb3d', 'objs.ben_arfeature', 'objs.ldif_blob_center', 'objs.ldif_analytic_code', 'objs.layout_dis', 'objs.ceil_dis', 'objs.floor_dis', 'objs.bfov.lon', 'objs.bfov.lat', 'objs.bfov.x_fov', 'objs.bfov.y_fov'], 'rel_features': ['bdb2d', 'g_feature', 'bdb3d_test', 'rel_rot']}}, 'train': {'epochs': 35, 'freeze': ['bdb3d_estimation', 'shape_encoder', 'shape_decoder'], 'batch_size': 16}, 'val': {'batch_size': 16}, 'test': {'batch_size': 1}, 'log': {'vis_step': 1, 'print_step': 10, 'save_mesh': True, 'path': 'out/pano3d/22120122175507', 'save_checkpoint': False, 'vis_path': 'out/pano3d/22120122175507/visualization'}, 'config': 'configs/pano3d_igibson.yaml', 'mode': 'test', 'demo_path': '/home/lmf/tmp/repf_pano_client/1669904269/', 'name': None, 'sweep': False, 'full': True}
wandb: W&B syncing is set to `offline` in this directory.  Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
INFO:test:Data save path: out/pano3d/22120122175507
INFO:test:Loading device settings.
INFO:test:GPU mode is on.
INFO:test:GPU Ids: 0 used.
INFO:test:Loading dataset.
INFO:test:Loading model.
INFO:fvcore.common.checkpoint:[Checkpointer] Loading from out/detector/detector_mask_rcnn/model_final.pth ...
WARNING:fvcore.common.checkpoint:The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mproposal_generator.anchor_generator.cell_anchors.{0, 1, 2, 3, 4}[0m
INFO:test:Pano3D(
  (layout_estimation): HorizonNet(
    (horizon_net): DataParallel(
      (module): HorizonNetNoPostProcess(
        (feature_extractor): Resnet(
          (encoder): ResNet(
            (conv1): Sequential(
              (0): LR_PAD()
              (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 0), bias=False)
            )
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
            (layer1): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer2): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer3): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (3): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (4): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (5): Bottleneck(
                (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
            (layer4): Sequential(
              (0): Bottleneck(
                (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (downsample): Sequential(
                  (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                  (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (1): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
              (2): Bottleneck(
                (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv2): Sequential(
                  (0): LR_PAD()
                  (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 0), bias=False)
                )
                (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (reduce_height_module): GlobalHeightStage(
          (ghc_lst): ModuleList(
            (0): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (1): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (2): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
            (3): GlobalHeightConv(
              (layer): Sequential(
                (0): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (1): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (2): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
                (3): ConvCompressH(
                  (layers): Sequential(
                    (0): Sequential(
                      (0): LR_PAD()
                      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 1), padding=(1, 0))
                    )
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                )
              )
            )
          )
        )
        (bi_rnn): LSTM(1024, 512, num_layers=2, dropout=0.5, bidirectional=True)
        (drop_out): Dropout(p=0.5, inplace=False)
        (linear): Linear(in_features=1024, out_features=12, bias=True)
      )
    )
  )
  (bdb3d_estimation): Bdb3DNet(
    (resnet): DataParallel(
      (module): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (5): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)
      )
    )
    (relnet): RelationNet(
      (fc_g): Linear(in_features=64, out_features=16, bias=True)
      (threshold): Threshold(threshold=1e-06, value=1e-06)
      (softmax): Softmax(dim=1)
      (fc_K): Linear(in_features=2048, out_features=1024, bias=True)
      (fc_Q): Linear(in_features=2048, out_features=1024, bias=True)
      (conv_s): Conv1d(1, 1, kernel_size=(1,), stride=(1,))
    )
    (fc1): Linear(in_features=2105, out_features=128, bias=True)
    (fc2): Linear(in_features=128, out_features=3, bias=True)
    (fc3): Linear(in_features=2105, out_features=128, bias=True)
    (fc4): Linear(in_features=128, out_features=12, bias=True)
    (fc5): Linear(in_features=2105, out_features=128, bias=True)
    (fc_centroid): Linear(in_features=128, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=2105, out_features=128, bias=True)
    (fc_off_2): Linear(in_features=128, out_features=2, bias=True)
    (relu_1): LeakyReLU(negative_slope=0.2)
    (dropout_1): Dropout(p=0.5, inplace=False)
  )
  (shape_encoder): DataParallel(
    (module): LIEN(
      (encoder): ResNet_Full(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)
        (fc): Linear(in_features=512, out_features=1536, bias=True)
      )
      (mlp): Sequential(
        (0): Linear(in_features=1593, out_features=1536, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=1536, out_features=1536, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=1536, out_features=1344, bias=True)
      )
    )
  )
  (shape_decoder): DataParallel(
    (module): LDIF(
      (decoder): OccNetDecoder(
        (fc1): Linear(in_features=3, out_features=32, bias=True)
        (resnet): BatchedOccNetResnetLayer(
          (bn1): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc1): Linear(in_features=32, out_features=32, bias=True)
          (bn2): BatchedCBatchNormLayer(
            (fc_beta): Linear(in_features=32, out_features=32, bias=True)
            (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
          )
          (fc2): Linear(in_features=32, out_features=32, bias=True)
        )
        (bn): BatchedCBatchNormLayer(
          (fc_beta): Linear(in_features=32, out_features=32, bias=True)
          (fc_gamma): Linear(in_features=32, out_features=32, bias=True)
        )
        (fc2): Linear(in_features=32, out_features=1, bias=True)
      )
    )
  )
  (scene_gcn): RelationSGCN(
    (obj_embedding): Sequential(
      (0): Linear(in_features=2658, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (rel_embedding): Sequential(
      (0): Linear(in_features=85, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (lo_embedding): Sequential(
      (0): Linear(in_features=34, out_features=512, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=512, out_features=512, bias=True)
    )
    (gcn_collect_feat): ModuleList(
      (0): _GraphConvolutionLayer_Collect(
        (collect_units): ModuleList(
          (0): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (1): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (2): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (3): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
          (4): _Collection_Unit(
            (fc): Linear(in_features=512, out_features=512, bias=True)
          )
        )
      )
    )
    (gcn_update_feat): ModuleList(
      (0): _GraphConvolutionLayer_Update(
        (update_units): ModuleList(
          (0): _Update_Unit()
          (1): _Update_Unit()
        )
      )
    )
    (relu): LeakyReLU(negative_slope=0.2)
    (dropout): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=512, out_features=256, bias=True)
    (fc2): Linear(in_features=256, out_features=3, bias=True)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc4): Linear(in_features=256, out_features=12, bias=True)
    (fc5): Linear(in_features=512, out_features=256, bias=True)
    (fc_centroid): Linear(in_features=256, out_features=12, bias=True)
    (fc_off_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_off_2): Linear(in_features=256, out_features=2, bias=True)
    (fc_obj_obj_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_obj_dis_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_dis_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_obj_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_obj_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_wall_rot_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_rot_2): Linear(in_features=256, out_features=8, bias=True)
    (fc_obj_wall_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_wall_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_floor_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_floor_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_ceil_tch_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_ceil_tch_2): Linear(in_features=256, out_features=1, bias=True)
    (fc_obj_in_room_1): Linear(in_features=512, out_features=256, bias=True)
    (fc_obj_in_room_2): Linear(in_features=256, out_features=1, bias=True)
  )
)
INFO:test:Begin to finetune from the existing weight.
INFO:test:Loading checkpoint from out/relation_scene_gcn/21091021124435/model_best.pth.
INFO:test:{'layout_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading checkpoint from out/layout_estimation/21022217101943/model_best.pth.
INFO:test:{'shape_decoder', 'shape_encoder', 'scene_gcn', 'bdb3d_estimation'} subnet missed.
INFO:test:Weights for finetuning loaded.
INFO:test:Loading tester.
INFO:test:Start to test.
INFO:test:Total number of parameters in Pano3D: 132096111.
INFO:test:----------------------------------------------------------------------------------------------------
INFO:test:----------------------------------------------------------------------------------------------------
/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370141920/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  filter_inds = filter_mask.nonzero()
INFO:root:Device 0 is available for rendering
INFO:root:Device 1 is available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '2']' returned non-zero exit status 1.
INFO:root:Device 2 is not available for rendering
INFO:root:Command '['/home/lmf/anaconda3/envs/Pano3D/lib/python3.7/site-packages/gibson2/render/mesh_renderer/build/test_device', '3']' returned non-zero exit status 1.
INFO:root:Device 3 is not available for rendering
INFO:root:Using device 0 for rendering
INFO:root:Loading /dev/shm/tmpurl2t4hy/layout_mesh/layout_mesh.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/16/16.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/15/15.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/14/14.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/13/13.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/12/12.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/11/11.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/10/10.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/9/9.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/8/8.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/7/7.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/6/6.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/5/5.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/4/4.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/3/3.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/2/2.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/1/1.obj
INFO:root:Loading /dev/shm/tmpurl2t4hy/0/0.obj
INFO:test:Test time elapsed: (23.827746).
INFO:test:

INFO:test:Testing finished.
wandb: Waiting for W&B process to finish, PID 12409
wandb: Program ended successfully.
wandb: Find user logs for this run at: out/pano3d/22120122175507/wandb/offline-run-20221201_221755-22120122175507/logs/debug.log
wandb: Find internal logs for this run at: out/pano3d/22120122175507/wandb/offline-run-20221201_221755-22120122175507/logs/debug-internal.log
wandb: You can sync this run to the cloud by running:
wandb: wandb sync out/pano3d/22120122175507/wandb/offline-run-20221201_221755-22120122175507

/home/lmf/tmp/repf_pano_client/1669378964/input.png
image_path: /home/lmf/tmp/repf_pano_client/1669641242/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1669641242/input.png"
detect_result_bbx_list {
  xmin: 311
  ymin: 306
  xmax: 555
  ymax: 445
  label: 2
  conf: 0.6930673718452454
}
detect_result_bbx_list {
  xmin: 680
  ymin: 200
  xmax: 784
  ymax: 332
  label: 1
  conf: 0.49333620071411133
}
detect_result_bbx_list {
  xmin: 329
  ymin: 310
  xmax: 445
  ymax: 434
  label: 10
  conf: 0.5436238050460815
}
detect_result_bbx_list {
  xmin: 678
  ymin: 199
  xmax: 784
  ymax: 342
  label: 10
  conf: 0.29169943928718567
}
detect_result_bbx_list {
  xmin: 573
  ymin: 188
  xmax: 651
  ymax: 386
  label: 10
  conf: 0.5145995020866394
}
detect_result_bbx_list {
  xmin: 126
  ymin: 170
  xmax: 220
  ymax: 394
  label: 10
  conf: 0.4034420847892761
}
detect_result_bbx_list {
  xmin: 965
  ymin: 207
  xmax: 1021
  ymax: 365
  label: 9
  conf: 0.5806583762168884
}
detect_result_bbx_list {
  xmin: 43
  ymin: 177
  xmax: 148
  ymax: 412
  label: 9
  conf: 0.8423014879226685
}
detect_result_bbx_list {
  xmin: 197
  ymin: 196
  xmax: 272
  ymax: 382
  label: 9
  conf: 0.9051350951194763
}
detect_result_bbx_list {
  xmin: 60
  ymin: 76
  xmax: 131
  ymax: 105
  label: 7
  conf: 0.6799194812774658
}
detect_result_bbx_list {
  xmin: 437
  ymin: 357
  xmax: 537
  ymax: 444
  label: 11
  conf: 0.7270703315734863
}
detect_result_bbx_list {
  xmin: 677
  ymin: 200
  xmax: 786
  ymax: 339
  label: 4
  conf: 0.8902827501296997
}
detect_result_bbx_list {
  xmin: 558
  ymin: 188
  xmax: 652
  ymax: 343
  label: 4
  conf: 0.6036067008972168
}
detect_result_bbx_list {
  xmin: 423
  ymin: 332
  xmax: 553
  ymax: 380
  label: 6
  conf: 0.5519174337387085
}
detect_result_bbx_list {
  xmin: 389
  ymin: 179
  xmax: 530
  ymax: 321
  label: 12
  conf: 0.4581897556781769
}

/home/lmf/tmp/repf_pano_client/1669641242/input.png
image_path: /home/lmf/tmp/repf_pano_client/1669901725/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1669901725/input.png"
detect_result_bbx_list {
  ymin: 321
  xmax: 78
  ymax: 351
  label: 2
  conf: 0.28076016902923584
}
detect_result_bbx_list {
  xmin: 769
  ymin: 349
  xmax: 923
  ymax: 453
  label: 2
  conf: 0.6134758591651917
}
detect_result_bbx_list {
  xmin: 12
  ymin: 217
  xmax: 44
  ymax: 243
  label: 1
  conf: 0.3530730605125427
}
detect_result_bbx_list {
  xmin: 308
  ymin: 220
  xmax: 328
  ymax: 300
  label: 5
  conf: 0.42631247639656067
}
detect_result_bbx_list {
  xmin: 59
  ymin: 221
  xmax: 100
  ymax: 335
  label: 9
  conf: 0.8772726655006409
}
detect_result_bbx_list {
  xmin: 934
  ymin: 187
  xmax: 1018
  ymax: 379
  label: 9
  conf: 0.8312005996704102
}
detect_result_bbx_list {
  xmin: 115
  ymin: 212
  xmax: 185
  ymax: 349
  label: 9
  conf: 0.870652437210083
}
detect_result_bbx_list {
  xmin: 615
  ymin: 183
  xmax: 690
  ymax: 405
  label: 9
  conf: 0.88995361328125
}
detect_result_bbx_list {
  xmin: 301
  ymin: 217
  xmax: 329
  ymax: 308
  label: 9
  conf: 0.571220338344574
}
detect_result_bbx_list {
  xmin: 422
  ymin: 361
  xmax: 487
  ymax: 421
  label: 11
  conf: 0.8059971928596497
}
detect_result_bbx_list {
  xmin: 229
  ymin: 213
  xmax: 315
  ymax: 300
  label: 4
  conf: 0.8180039525032043
}
detect_result_bbx_list {
  xmin: 153
  ymin: 323
  xmax: 409
  ymax: 439
  conf: 0.8917009830474854
}
detect_result_bbx_list {
  xmin: 109
  ymin: 205
  xmax: 125
  ymax: 212
  label: 7
  conf: 0.379611611366272
}
detect_result_bbx_list {
  xmin: 961
  ymin: 168
  xmax: 993
  ymax: 180
  label: 7
  conf: 0.6167294979095459
}
detect_result_bbx_list {
  xmin: 6
  ymin: 216
  xmax: 52
  ymax: 245
  label: 10
  conf: 0.5557961463928223
}
detect_result_bbx_list {
  xmin: 931
  ymin: 187
  xmax: 1024
  ymax: 382
  label: 10
  conf: 0.7282737493515015
}
detect_result_bbx_list {
  xmin: 245
  ymin: 219
  xmax: 330
  ymax: 301
  label: 10
  conf: 0.34740331768989563
}
detect_result_bbx_list {
  xmin: 395
  ymin: 355
  xmax: 499
  ymax: 405
  label: 6
  conf: 0.42511051893234253
}

/home/lmf/tmp/repf_pano_client/1669901725/input.png
image_path: /home/lmf/tmp/repf_pano_client/1669901979/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1669901979/input.png"
detect_result_bbx_list {
  ymin: 321
  xmax: 78
  ymax: 351
  label: 2
  conf: 0.28076016902923584
}
detect_result_bbx_list {
  xmin: 769
  ymin: 349
  xmax: 923
  ymax: 453
  label: 2
  conf: 0.6134758591651917
}
detect_result_bbx_list {
  xmin: 12
  ymin: 217
  xmax: 44
  ymax: 243
  label: 1
  conf: 0.3530730605125427
}
detect_result_bbx_list {
  xmin: 308
  ymin: 220
  xmax: 328
  ymax: 300
  label: 5
  conf: 0.42631247639656067
}
detect_result_bbx_list {
  xmin: 59
  ymin: 221
  xmax: 100
  ymax: 335
  label: 9
  conf: 0.8772726655006409
}
detect_result_bbx_list {
  xmin: 934
  ymin: 187
  xmax: 1018
  ymax: 379
  label: 9
  conf: 0.8312005996704102
}
detect_result_bbx_list {
  xmin: 115
  ymin: 212
  xmax: 185
  ymax: 349
  label: 9
  conf: 0.870652437210083
}
detect_result_bbx_list {
  xmin: 615
  ymin: 183
  xmax: 690
  ymax: 405
  label: 9
  conf: 0.88995361328125
}
detect_result_bbx_list {
  xmin: 301
  ymin: 217
  xmax: 329
  ymax: 308
  label: 9
  conf: 0.571220338344574
}
detect_result_bbx_list {
  xmin: 422
  ymin: 361
  xmax: 487
  ymax: 421
  label: 11
  conf: 0.8059971928596497
}
detect_result_bbx_list {
  xmin: 229
  ymin: 213
  xmax: 315
  ymax: 300
  label: 4
  conf: 0.8180039525032043
}
detect_result_bbx_list {
  xmin: 153
  ymin: 323
  xmax: 409
  ymax: 439
  conf: 0.8917009830474854
}
detect_result_bbx_list {
  xmin: 109
  ymin: 205
  xmax: 125
  ymax: 212
  label: 7
  conf: 0.379611611366272
}
detect_result_bbx_list {
  xmin: 961
  ymin: 168
  xmax: 993
  ymax: 180
  label: 7
  conf: 0.6167294979095459
}
detect_result_bbx_list {
  xmin: 6
  ymin: 216
  xmax: 52
  ymax: 245
  label: 10
  conf: 0.5557961463928223
}
detect_result_bbx_list {
  xmin: 931
  ymin: 187
  xmax: 1024
  ymax: 382
  label: 10
  conf: 0.7282737493515015
}
detect_result_bbx_list {
  xmin: 245
  ymin: 219
  xmax: 330
  ymax: 301
  label: 10
  conf: 0.34740331768989563
}
detect_result_bbx_list {
  xmin: 395
  ymin: 355
  xmax: 499
  ymax: 405
  label: 6
  conf: 0.42511051893234253
}

/home/lmf/tmp/repf_pano_client/1669901979/input.png
image_path: /home/lmf/tmp/repf_pano_client/1669904269/input.png
Greeter client received: 
/home/lmf/tmp/repf_pano_client/1669904269/
/home/lmf/tmp/repf_pano_client/1669904269/input.png
image_path: /home/lmf/tmp/repf_pano_client/1669904388/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1669904388/input.png"
detect_result_bbx_list {
  ymin: 321
  xmax: 78
  ymax: 351
  label: 2
  conf: 0.28076016902923584
}
detect_result_bbx_list {
  xmin: 769
  ymin: 349
  xmax: 923
  ymax: 453
  label: 2
  conf: 0.6134758591651917
}
detect_result_bbx_list {
  xmin: 12
  ymin: 217
  xmax: 44
  ymax: 243
  label: 1
  conf: 0.3530730605125427
}
detect_result_bbx_list {
  xmin: 308
  ymin: 220
  xmax: 328
  ymax: 300
  label: 5
  conf: 0.42631247639656067
}
detect_result_bbx_list {
  xmin: 59
  ymin: 221
  xmax: 100
  ymax: 335
  label: 9
  conf: 0.8772726655006409
}
detect_result_bbx_list {
  xmin: 934
  ymin: 187
  xmax: 1018
  ymax: 379
  label: 9
  conf: 0.8312005996704102
}
detect_result_bbx_list {
  xmin: 115
  ymin: 212
  xmax: 185
  ymax: 349
  label: 9
  conf: 0.870652437210083
}
detect_result_bbx_list {
  xmin: 615
  ymin: 183
  xmax: 690
  ymax: 405
  label: 9
  conf: 0.88995361328125
}
detect_result_bbx_list {
  xmin: 301
  ymin: 217
  xmax: 329
  ymax: 308
  label: 9
  conf: 0.571220338344574
}
detect_result_bbx_list {
  xmin: 422
  ymin: 361
  xmax: 487
  ymax: 421
  label: 11
  conf: 0.8059971928596497
}
detect_result_bbx_list {
  xmin: 229
  ymin: 213
  xmax: 315
  ymax: 300
  label: 4
  conf: 0.8180039525032043
}
detect_result_bbx_list {
  xmin: 153
  ymin: 323
  xmax: 409
  ymax: 439
  conf: 0.8917009830474854
}
detect_result_bbx_list {
  xmin: 109
  ymin: 205
  xmax: 125
  ymax: 212
  label: 7
  conf: 0.379611611366272
}
detect_result_bbx_list {
  xmin: 961
  ymin: 168
  xmax: 993
  ymax: 180
  label: 7
  conf: 0.6167294979095459
}
detect_result_bbx_list {
  xmin: 6
  ymin: 216
  xmax: 52
  ymax: 245
  label: 10
  conf: 0.5557961463928223
}
detect_result_bbx_list {
  xmin: 931
  ymin: 187
  xmax: 1024
  ymax: 382
  label: 10
  conf: 0.7282737493515015
}
detect_result_bbx_list {
  xmin: 245
  ymin: 219
  xmax: 330
  ymax: 301
  label: 10
  conf: 0.34740331768989563
}
detect_result_bbx_list {
  xmin: 395
  ymin: 355
  xmax: 499
  ymax: 405
  label: 6
  conf: 0.42511051893234253
}
./run.sh: 1: ./run.sh: source: not found
/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/bootstrap.py:108: UserWarning: 
This call to matplotlib.use() has no effect because the backend has already
been chosen; matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
or matplotlib.backends is imported for the first time.

The backend was *originally* set to 'Qt5Agg' by the following code:
  File "/home/lmf/anaconda3/bin/streamlit", line 5, in <module>
    from streamlit.cli import main
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/__init__.py", line 70, in <module>
    from streamlit.delta_generator import DeltaGenerator as _DeltaGenerator
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/delta_generator.py", line 72, in <module>
    from streamlit.elements.arrow import ArrowMixin
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/elements/arrow.py", line 20, in <module>
    from pandas.io.formats.style import Styler
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/pandas/io/formats/style.py", line 34, in <module>
    import matplotlib.pyplot as plt
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/matplotlib/pyplot.py", line 71, in <module>
    from matplotlib.backends import pylab_setup
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/matplotlib/backends/__init__.py", line 16, in <module>
    line for line in traceback.format_stack()


  matplotlib.use("Agg")
2022-12-02 21:58:25.338 Did not auto detect external IP.
Please go to https://docs.streamlit.io/ for debugging hints.

  You can now view your Streamlit app in your browser.

  Network URL: http://219.224.167.226:8502

2022-12-02 21:58:28.200 Traceback (most recent call last):
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/scriptrunner/script_runner.py", line 475, in _run_script
    exec(code, module.__dict__)
  File "/home/lmf/Deploy/220925_RepFPanoStreamlit/demo.py", line 8, in <module>
    from util import *
  File "/home/lmf/Deploy/220925_RepFPanoStreamlit/util.py", line 3, in <module>
    import cv2
ModuleNotFoundError: No module named 'cv2'

2022-12-02 21:58:30.541 Traceback (most recent call last):
  File "/home/lmf/anaconda3/lib/python3.7/site-packages/streamlit/scriptrunner/script_runner.py", line 475, in _run_script
    exec(code, module.__dict__)
  File "/home/lmf/Deploy/220925_RepFPanoStreamlit/demo.py", line 8, in <module>
    from util import *
  File "/home/lmf/Deploy/220925_RepFPanoStreamlit/util.py", line 3, in <module>
    import cv2
ModuleNotFoundError: No module named 'cv2'

2022-12-02 21:59:06.106 Did not auto detect external IP.
Please go to https://docs.streamlit.io/ for debugging hints.

  You can now view your Streamlit app in your browser.

  Network URL: http://219.224.167.226:8503

image_path: /home/lmf/tmp/repf_pano_client/1669989561/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1669989561/input.png"
detect_result_bbx_list {
  ymin: 321
  xmax: 78
  ymax: 351
  label: 2
  conf: 0.28076016902923584
}
detect_result_bbx_list {
  xmin: 769
  ymin: 349
  xmax: 923
  ymax: 453
  label: 2
  conf: 0.6134758591651917
}
detect_result_bbx_list {
  xmin: 12
  ymin: 217
  xmax: 44
  ymax: 243
  label: 1
  conf: 0.3530730605125427
}
detect_result_bbx_list {
  xmin: 308
  ymin: 220
  xmax: 328
  ymax: 300
  label: 5
  conf: 0.42631247639656067
}
detect_result_bbx_list {
  xmin: 59
  ymin: 221
  xmax: 100
  ymax: 335
  label: 9
  conf: 0.8772726655006409
}
detect_result_bbx_list {
  xmin: 934
  ymin: 187
  xmax: 1018
  ymax: 379
  label: 9
  conf: 0.8312005996704102
}
detect_result_bbx_list {
  xmin: 115
  ymin: 212
  xmax: 185
  ymax: 349
  label: 9
  conf: 0.870652437210083
}
detect_result_bbx_list {
  xmin: 615
  ymin: 183
  xmax: 690
  ymax: 405
  label: 9
  conf: 0.88995361328125
}
detect_result_bbx_list {
  xmin: 301
  ymin: 217
  xmax: 329
  ymax: 308
  label: 9
  conf: 0.571220338344574
}
detect_result_bbx_list {
  xmin: 422
  ymin: 361
  xmax: 487
  ymax: 421
  label: 11
  conf: 0.8059971928596497
}
detect_result_bbx_list {
  xmin: 229
  ymin: 213
  xmax: 315
  ymax: 300
  label: 4
  conf: 0.8180039525032043
}
detect_result_bbx_list {
  xmin: 153
  ymin: 323
  xmax: 409
  ymax: 439
  conf: 0.8917009830474854
}
detect_result_bbx_list {
  xmin: 109
  ymin: 205
  xmax: 125
  ymax: 212
  label: 7
  conf: 0.379611611366272
}
detect_result_bbx_list {
  xmin: 961
  ymin: 168
  xmax: 993
  ymax: 180
  label: 7
  conf: 0.6167294979095459
}
detect_result_bbx_list {
  xmin: 6
  ymin: 216
  xmax: 52
  ymax: 245
  label: 10
  conf: 0.5557961463928223
}
detect_result_bbx_list {
  xmin: 931
  ymin: 187
  xmax: 1024
  ymax: 382
  label: 10
  conf: 0.7282737493515015
}
detect_result_bbx_list {
  xmin: 245
  ymin: 219
  xmax: 330
  ymax: 301
  label: 10
  conf: 0.34740331768989563
}
detect_result_bbx_list {
  xmin: 395
  ymin: 355
  xmax: 499
  ymax: 405
  label: 6
  conf: 0.42511051893234253
}

/home/lmf/tmp/repf_pano_client/1669989561/input.png
image_path: /home/lmf/tmp/repf_pano_client/1669989697/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1669989697/input.png"
detect_result_bbx_list {
  ymin: 321
  xmax: 78
  ymax: 351
  label: 2
  conf: 0.28076016902923584
}
detect_result_bbx_list {
  xmin: 769
  ymin: 349
  xmax: 923
  ymax: 453
  label: 2
  conf: 0.6134758591651917
}
detect_result_bbx_list {
  xmin: 12
  ymin: 217
  xmax: 44
  ymax: 243
  label: 1
  conf: 0.3530730605125427
}
detect_result_bbx_list {
  xmin: 308
  ymin: 220
  xmax: 328
  ymax: 300
  label: 5
  conf: 0.42631247639656067
}
detect_result_bbx_list {
  xmin: 59
  ymin: 221
  xmax: 100
  ymax: 335
  label: 9
  conf: 0.8772726655006409
}
detect_result_bbx_list {
  xmin: 934
  ymin: 187
  xmax: 1018
  ymax: 379
  label: 9
  conf: 0.8312005996704102
}
detect_result_bbx_list {
  xmin: 115
  ymin: 212
  xmax: 185
  ymax: 349
  label: 9
  conf: 0.870652437210083
}
detect_result_bbx_list {
  xmin: 615
  ymin: 183
  xmax: 690
  ymax: 405
  label: 9
  conf: 0.88995361328125
}
detect_result_bbx_list {
  xmin: 301
  ymin: 217
  xmax: 329
  ymax: 308
  label: 9
  conf: 0.571220338344574
}
detect_result_bbx_list {
  xmin: 422
  ymin: 361
  xmax: 487
  ymax: 421
  label: 11
  conf: 0.8059971928596497
}
detect_result_bbx_list {
  xmin: 229
  ymin: 213
  xmax: 315
  ymax: 300
  label: 4
  conf: 0.8180039525032043
}
detect_result_bbx_list {
  xmin: 153
  ymin: 323
  xmax: 409
  ymax: 439
  conf: 0.8917009830474854
}
detect_result_bbx_list {
  xmin: 109
  ymin: 205
  xmax: 125
  ymax: 212
  label: 7
  conf: 0.379611611366272
}
detect_result_bbx_list {
  xmin: 961
  ymin: 168
  xmax: 993
  ymax: 180
  label: 7
  conf: 0.6167294979095459
}
detect_result_bbx_list {
  xmin: 6
  ymin: 216
  xmax: 52
  ymax: 245
  label: 10
  conf: 0.5557961463928223
}
detect_result_bbx_list {
  xmin: 931
  ymin: 187
  xmax: 1024
  ymax: 382
  label: 10
  conf: 0.7282737493515015
}
detect_result_bbx_list {
  xmin: 245
  ymin: 219
  xmax: 330
  ymax: 301
  label: 10
  conf: 0.34740331768989563
}
detect_result_bbx_list {
  xmin: 395
  ymin: 355
  xmax: 499
  ymax: 405
  label: 6
  conf: 0.42511051893234253
}

/home/lmf/tmp/repf_pano_client/1669989697/input.png
image_path: /home/lmf/tmp/repf_pano_client/1669989799/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1669989799/input.png"
detect_result_bbx_list {
  ymin: 321
  xmax: 78
  ymax: 351
  label: 2
  conf: 0.28076016902923584
}
detect_result_bbx_list {
  xmin: 769
  ymin: 349
  xmax: 923
  ymax: 453
  label: 2
  conf: 0.6134758591651917
}
detect_result_bbx_list {
  xmin: 12
  ymin: 217
  xmax: 44
  ymax: 243
  label: 1
  conf: 0.3530730605125427
}
detect_result_bbx_list {
  xmin: 308
  ymin: 220
  xmax: 328
  ymax: 300
  label: 5
  conf: 0.42631247639656067
}
detect_result_bbx_list {
  xmin: 59
  ymin: 221
  xmax: 100
  ymax: 335
  label: 9
  conf: 0.8772726655006409
}
detect_result_bbx_list {
  xmin: 934
  ymin: 187
  xmax: 1018
  ymax: 379
  label: 9
  conf: 0.8312005996704102
}
detect_result_bbx_list {
  xmin: 115
  ymin: 212
  xmax: 185
  ymax: 349
  label: 9
  conf: 0.870652437210083
}
detect_result_bbx_list {
  xmin: 615
  ymin: 183
  xmax: 690
  ymax: 405
  label: 9
  conf: 0.88995361328125
}
detect_result_bbx_list {
  xmin: 301
  ymin: 217
  xmax: 329
  ymax: 308
  label: 9
  conf: 0.571220338344574
}
detect_result_bbx_list {
  xmin: 422
  ymin: 361
  xmax: 487
  ymax: 421
  label: 11
  conf: 0.8059971928596497
}
detect_result_bbx_list {
  xmin: 229
  ymin: 213
  xmax: 315
  ymax: 300
  label: 4
  conf: 0.8180039525032043
}
detect_result_bbx_list {
  xmin: 153
  ymin: 323
  xmax: 409
  ymax: 439
  conf: 0.8917009830474854
}
detect_result_bbx_list {
  xmin: 109
  ymin: 205
  xmax: 125
  ymax: 212
  label: 7
  conf: 0.379611611366272
}
detect_result_bbx_list {
  xmin: 961
  ymin: 168
  xmax: 993
  ymax: 180
  label: 7
  conf: 0.6167294979095459
}
detect_result_bbx_list {
  xmin: 6
  ymin: 216
  xmax: 52
  ymax: 245
  label: 10
  conf: 0.5557961463928223
}
detect_result_bbx_list {
  xmin: 931
  ymin: 187
  xmax: 1024
  ymax: 382
  label: 10
  conf: 0.7282737493515015
}
detect_result_bbx_list {
  xmin: 245
  ymin: 219
  xmax: 330
  ymax: 301
  label: 10
  conf: 0.34740331768989563
}
detect_result_bbx_list {
  xmin: 395
  ymin: 355
  xmax: 499
  ymax: 405
  label: 6
  conf: 0.42511051893234253
}

/home/lmf/tmp/repf_pano_client/1669989799/input.png
image_path: /home/lmf/tmp/repf_pano_client/1669989876/input.png
Greeter client received: 
image_path: "/home/lmf/tmp/repf_pano_client/1669989876/input.png"
detect_result_bbx_list {
  ymin: 321
  xmax: 78
  ymax: 351
  label: 2
  conf: 0.28076016902923584
}
detect_result_bbx_list {
  xmin: 769
  ymin: 349
  xmax: 923
  ymax: 453
  label: 2
  conf: 0.6134758591651917
}
detect_result_bbx_list {
  xmin: 12
  ymin: 217
  xmax: 44
  ymax: 243
  label: 1
  conf: 0.3530730605125427
}
detect_result_bbx_list {
  xmin: 308
  ymin: 220
  xmax: 328
  ymax: 300
  label: 5
  conf: 0.42631247639656067
}
detect_result_bbx_list {
  xmin: 59
  ymin: 221
  xmax: 100
  ymax: 335
  label: 9
  conf: 0.8772726655006409
}
detect_result_bbx_list {
  xmin: 934
  ymin: 187
  xmax: 1018
  ymax: 379
  label: 9
  conf: 0.8312005996704102
}
detect_result_bbx_list {
  xmin: 115
  ymin: 212
  xmax: 185
  ymax: 349
  label: 9
  conf: 0.870652437210083
}
detect_result_bbx_list {
  xmin: 615
  ymin: 183
  xmax: 690
  ymax: 405
  label: 9
  conf: 0.88995361328125
}
detect_result_bbx_list {
  xmin: 301
  ymin: 217
  xmax: 329
  ymax: 308
  label: 9
  conf: 0.571220338344574
}
detect_result_bbx_list {
  xmin: 422
  ymin: 361
  xmax: 487
  ymax: 421
  label: 11
  conf: 0.8059971928596497
}
detect_result_bbx_list {
  xmin: 229
  ymin: 213
  xmax: 315
  ymax: 300
  label: 4
  conf: 0.8180039525032043
}
detect_result_bbx_list {
  xmin: 153
  ymin: 323
  xmax: 409
  ymax: 439
  conf: 0.8917009830474854
}
detect_result_bbx_list {
  xmin: 109
  ymin: 205
  xmax: 125
  ymax: 212
  label: 7
  conf: 0.379611611366272
}
detect_result_bbx_list {
  xmin: 961
  ymin: 168
  xmax: 993
  ymax: 180
  label: 7
  conf: 0.6167294979095459
}
detect_result_bbx_list {
  xmin: 6
  ymin: 216
  xmax: 52
  ymax: 245
  label: 10
  conf: 0.5557961463928223
}
detect_result_bbx_list {
  xmin: 931
  ymin: 187
  xmax: 1024
  ymax: 382
  label: 10
  conf: 0.7282737493515015
}
detect_result_bbx_list {
  xmin: 245
  ymin: 219
  xmax: 330
  ymax: 301
  label: 10
  conf: 0.34740331768989563
}
detect_result_bbx_list {
  xmin: 395
  ymin: 355
  xmax: 499
  ymax: 405
  label: 6
  conf: 0.42511051893234253
}
